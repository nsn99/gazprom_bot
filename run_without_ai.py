#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –±–µ–∑ AI —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
"""

import asyncio
import logging
import sys
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –ø—Ä–æ–µ–∫—Ç–∞ –≤ Python path
sys.path.insert(0, str(Path(__file__).parent))

from config import settings, validate_config, print_config_summary
from monitoring.logger import setup_logging
from database.database import init_database
from telegram_bot.bot import create_application


async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üöÄ –ó–∞–ø—É—Å–∫ Gazprom Trading Bot (–±–µ–∑ AI)...")
    
    # –í–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    if not validate_config(settings):
        print("‚ùå –û—à–∏–±–∫–∞ –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–∞–π–ª .env")
        return
    
    # –í—ã–≤–æ–¥ —Å–≤–æ–¥–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    print_config_summary(settings)
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    setup_logging(settings)
    logger = logging.getLogger(__name__)
    
    try:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        logger.info("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
        await init_database()
        logger.info("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –∏ –∑–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        logger.info("–°–æ–∑–¥–∞–Ω–∏–µ Telegram –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...")
        application = create_application()
        
        logger.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ (–±–µ–∑ AI —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞)...")
        print("\n‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
        print("üìù –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:")
        print("  /start - –°–æ–∑–¥–∞—Ç—å –ø–æ—Ä—Ç—Ñ–µ–ª—å")
        print("  /portfolio - –ü–æ–∫–∞–∑–∞—Ç—å –ø–æ—Ä—Ç—Ñ–µ–ª—å")
        print("  /balance - –ü–æ–∫–∞–∑–∞—Ç—å –±–∞–ª–∞–Ω—Å")
        print("  /history - –ò—Å—Ç–æ—Ä–∏—è —Å–¥–µ–ª–æ–∫")
        print("  /help - –ü–æ–º–æ—â—å")
        print("\n‚ö†Ô∏è  –ö–æ–º–∞–Ω–¥–∞ /recommend –≤—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω–∞ (–ø—Ä–æ–±–ª–µ–º—ã —Å AI)")
        print("\n–ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏")
        
        # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
        await application.run_polling()
        
    except KeyboardInterrupt:
        logger.info("–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞ –ø–æ –∑–∞–ø—Ä–æ—Å—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...")
        print("\nüëã –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        print(f"\n‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")


if __name__ == "__main__":
    asyncio.run(main())