#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥ Telegram –±–æ—Ç–∞
"""

import asyncio
import sys
import os

# –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ Python path
sys.path.insert(0, os.getcwd())

from ai.agentrouter_client import AgentRouterClient
from data.moex_client import MOEXClient
from portfolio.manager import PortfolioManager
from database.database import get_db_manager

async def test_all_components():
    """–¢–µ—Å—Ç –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –±–æ—Ç–∞"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ Gazprom Trading Bot...")
    
    # –¢–µ—Å—Ç 1: MOEX Client
    print("\n1. üìä –¢–µ—Å—Ç MOEX Client...")
    try:
        async with MOEXClient() as moex:
            price = await moex.get_current_price("GAZP")
            print(f"   ‚úÖ –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞ GAZP: {price} RUB")
            
            indicators = await moex.get_technical_indicators("GAZP")
            print(f"   ‚úÖ –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã –ø–æ–ª—É—á–µ–Ω—ã: RSI={indicators.get('rsi14', 'N/A')}")
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ MOEX Client: {e}")
    
    # –¢–µ—Å—Ç 2: AgentRouter Client
    print("\n2. ü§ñ –¢–µ—Å—Ç AgentRouter Client...")
    try:
        ai_client = AgentRouterClient()
        result = await ai_client.test_connection()
        if result["success"]:
            print(f"   ‚úÖ –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å AI —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: {result['model']}")
        else:
            print(f"   ‚ùå –û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å AI: {result['error']}")
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ AgentRouter Client: {e}")
    
    # –¢–µ—Å—Ç 3: Portfolio Manager
    print("\n3. üíº –¢–µ—Å—Ç Portfolio Manager...")
    try:
        db = get_db_manager()
        await db.initialize()
        
        portfolio_manager = PortfolioManager()
        
        # –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ—Ä—Ç—Ñ–µ–ª—è –¥–ª—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        test_user_id = 12345
        portfolio = await portfolio_manager.get_portfolio(test_user_id)
        if portfolio:
            print(f"   ‚úÖ –ü–æ—Ä—Ç—Ñ–µ–ª—å –ø–æ–ª—É—á–µ–Ω: {portfolio.name}")
        else:
            print(f"   ‚ö†Ô∏è –ü–æ—Ä—Ç—Ñ–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
        
        # –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ø–æ—Ä—Ç—Ñ–µ–ª—è
        try:
            user = await portfolio_manager.create_user(test_user_id, "test_user", 100000)
            print(f"   ‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω: {user.id}")
        except Exception as e:
            print(f"   ‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –æ—à–∏–±–∫–∞: {e}")
            
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ Portfolio Manager: {e}")
    
    # –¢–µ—Å—Ç 4: AI Trading Recommendation
    print("\n4. üìà –¢–µ—Å—Ç AI Trading Recommendation...")
    try:
        ai_client = AgentRouterClient()
        
        # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        test_context = {
            "portfolio": {
                "cash": 50000,
                "shares": 100,
                "avg_price": 150,
                "current_price": 155,
                "total_value": 65500,
                "pnl": 500,
                "pnl_percent": 0.77
            },
            "market_data": {
                "current_price": 155,
                "open_price": 152,
                "high_price": 157,
                "low_price": 151,
                "volume": 1000000,
                "daily_change": 1.97,
                "rsi": 65,
                "macd": 0.5
            }
        }
        
        system_prompt = """
        –¢—ã ‚Äî –ø–æ—Ä—Ç—Ñ–µ–ª—å–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä, —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä—É—é—â–∏–π—Å—è –Ω–∞ —Ç–æ—Ä–≥–æ–≤–ª–µ –∞–∫—Ü–∏—è–º–∏ 
        –ü–ê–û "–ì–∞–∑–ø—Ä–æ–º" (GAZP) –Ω–∞ –ú–æ—Å–∫–æ–≤—Å–∫–æ–π –±–∏—Ä–∂–µ.
        
        –î–∞–π —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—é –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON:
        {
          "action": "BUY/SELL/HOLD",
          "quantity": <–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ü–∏–π>,
          "reasoning": "<–æ–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ —Ä–µ—à–µ–Ω–∏—è>",
          "stop_loss": <—Ü–µ–Ω–∞ —Å—Ç–æ–ø-–ª–æ—Å—Å–∞>,
          "take_profit": <—Ü–µ–Ω–∞ —Ç–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç–∞>,
          "risk_level": "LOW/MEDIUM/HIGH",
          "confidence": <0-100>
        }
        """
        
        result = await ai_client.get_trading_recommendation(system_prompt, test_context)
        
        if result["success"]:
            recommendation = result["data"]
            print(f"   ‚úÖ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∞:")
            print(f"      –î–µ–π—Å—Ç–≤–∏–µ: {recommendation.get('action', 'N/A')}")
            print(f"      –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {recommendation.get('quantity', 'N/A')}")
            print(f"      –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {recommendation.get('confidence', 'N/A')}%")
            print(f"      –†–∏—Å–∫: {recommendation.get('risk_level', 'N/A')}")
            print(f"      –¢–æ–∫–µ–Ω–æ–≤ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ: {result.get('tokens_used', 0)}")
        else:
            print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏: {result.get('error', 'Unknown')}")
            
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ AI Recommendation: {e}")
    
    print("\nüéâ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")

if __name__ == "__main__":
    asyncio.run(test_all_components())