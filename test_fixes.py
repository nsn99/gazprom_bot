#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π –≤ –±–æ—Ç–µ
"""

import asyncio
import sys
import os

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å
sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))

from telegram_bot.bot import GazpromTelegramBot
from monitoring.logger import get_logger

logger = get_logger(__name__)

async def test_market_data_fix():
    """–¢–µ—Å—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä—ã–Ω–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
    print("üîç –¢–µ—Å—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä—ã–Ω–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö...")
    
    bot = GazpromTelegramBot()
    
    try:
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ø–æ—Ä—Ç—Ñ–µ–ª—å
        user_id = 73097766  # –í–∞—à ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Ä—Ç—Ñ–µ–ª—å
        portfolio = await bot.portfolio_manager.get_portfolio(user_id)
        if not portfolio:
            print("‚ùå –ü–æ—Ä—Ç—Ñ–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return False
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É
        async with bot.moex_client:
            current_price = await bot.moex_client.get_current_price("GAZP")
        
        if not current_price:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É")
            return False
        
        print(f"‚úÖ –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: {current_price}")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–≥–æ—Ç–æ–≤–∫—É –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
        context = await bot._prepare_ai_context(user_id, portfolio, current_price)
        
        print("üìä –î–∞–Ω–Ω—ã–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞:")
        print(f"  - current_price: {context['market_data']['current_price']}")
        print(f"  - day_high: {context['market_data']['day_high']}")
        print(f"  - day_low: {context['market_data']['day_low']}")
        print(f"  - volume: {context['market_data']['volume']}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥–∞–Ω–Ω—ã–µ –Ω–µ –Ω—É–ª–µ–≤—ã–µ
        if (context['market_data']['day_high'] > 0 and 
            context['market_data']['day_low'] > 0 and 
            context['market_data']['volume'] > 0):
            print("‚úÖ –†—ã–Ω–æ—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã")
            return True
        else:
            print("‚ùå –†—ã–Ω–æ—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –Ω–µ–ø–æ–ª–Ω—ã–µ")
            return False
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        return False

async def test_markdown_cleaning():
    """–¢–µ—Å—Ç –æ—á–∏—Å—Ç–∫–∏ Markdown"""
    print("\nüßπ –¢–µ—Å—Ç –æ—á–∏—Å—Ç–∫–∏ Markdown...")
    
    bot = GazpromTelegramBot()
    
    # –¢–µ—Å—Ç–æ–≤—ã–π —Ç–µ–∫—Å—Ç —Å –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º Markdown
    test_text = """
    **–ñ–∏—Ä–Ω—ã–π —Ç–µ–∫—Å—Ç** –∏ *–∫—É—Ä—Å–∏–≤* —Å `–∫–æ–¥–æ–º`
    –∏ _–ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏–µ–º_ –∏ ~–∑–∞—á–µ—Ä–∫–∏–≤–∞–Ω–∏–µ–º~
    
    –ú–Ω–æ–≥–æ –ø–µ—Ä–µ–Ω–æ—Å–æ–≤ —Å—Ç—Ä–æ–∫
    
    
    –∏ –µ—â–µ —Ç–µ–∫—Å—Ç
    """
    
    cleaned = bot._clean_markdown(test_text)
    
    print("–û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç:")
    print(repr(test_text))
    print("\n–û—á–∏—â–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç:")
    print(repr(cleaned))
    print("\n–û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç:")
    print(cleaned)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ–ø–∞—Å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã —É–¥–∞–ª–µ–Ω—ã
    dangerous_chars = ['_', '~', '`']
    has_dangerous = any(char in cleaned for char in dangerous_chars)
    
    if not has_dangerous:
        print("‚úÖ Markdown —É—Å–ø–µ—à–Ω–æ –æ—á–∏—â–µ–Ω")
        return True
    else:
        print("‚ùå –í —Ç–µ–∫—Å—Ç–µ –æ—Å—Ç–∞–ª–∏—Å—å –æ–ø–∞—Å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã")
        return False

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π...\n")
    
    # –¢–µ—Å—Ç 1: –†—ã–Ω–æ—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    market_data_ok = await test_market_data_fix()
    
    # –¢–µ—Å—Ç 2: –û—á–∏—Å—Ç–∫–∞ Markdown
    markdown_ok = await test_markdown_cleaning()
    
    print(f"\nüìã –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:")
    print(f"  - –†—ã–Ω–æ—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: {'‚úÖ' if market_data_ok else '‚ùå'}")
    print(f"  - –û—á–∏—Å—Ç–∫–∞ Markdown: {'‚úÖ' if markdown_ok else '‚ùå'}")
    
    if market_data_ok and markdown_ok:
        print("\nüéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã! –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.")
        return True
    else:
        print("\n‚ö†Ô∏è –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –Ω–µ –ø—Ä–æ–π–¥–µ–Ω—ã. –¢—Ä–µ–±—É–µ—Ç—Å—è –¥–æ—Ä–∞–±–æ—Ç–∫–∞.")
        return False

if __name__ == "__main__":
    asyncio.run(main())