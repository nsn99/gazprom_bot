#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ–º–∞–Ω–¥—ã /analysis –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏.
–ò–º–∏—Ç–∏—Ä—É–µ—Ç –ø–æ–ª–Ω—ã–π —Ä–∞–±–æ—á–∏–π –ø—Ä–æ—Ü–µ—Å—Å –∫–æ–º–∞–Ω–¥—ã /analysis.
"""

import asyncio
from ai.agentrouter_client import AgentRouterClient
from data.moex_client import MOEXClient
from database.database import DatabaseManager
from telegram_bot.bot import GazpromTelegramBot
from portfolio.manager import PortfolioManager


async def test_analysis_command():
    print('üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã /analysis –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏...')
    
    # 1. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤—Å–µ—Ö –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
    db_manager = DatabaseManager()
    moex_client = MOEXClient()
    ai_client = AgentRouterClient()
    portfolio_manager = PortfolioManager()
    bot = GazpromTelegramBot()
    
    # –ó–∞–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    test_user_id = 73097766

    # 2. –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–∞—è –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞: –ø–æ–ª—É—á–µ–Ω–∏–µ –ø–æ—Ä—Ç—Ñ–µ–ª—è –∏ —Ü–µ–Ω—ã
    print('üìä –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ—Ä—Ç—Ñ–µ–ª—è –∏ —Ä—ã–Ω–æ—á–Ω–æ–π —Ü–µ–Ω—ã...')
    portfolio = await portfolio_manager.get_portfolio(test_user_id)
    if not portfolio:
        print(f"‚ùå –ü–æ—Ä—Ç—Ñ–µ–ª—å –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {test_user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω —á–µ—Ä–µ–∑ /start.")
        return False

    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è MOEXClient
    async with moex_client:
        current_price_data = await moex_client.get_marketdata_l1()
        if not current_price_data or not current_price_data.last:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É GAZP.")
            return False
            
        current_price = current_price_data.last
        print(f'‚úÖ –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞ GAZP: {current_price} RUB')

    # 3. –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –¥–ª—è AI (—Ç–µ–ø–µ—Ä—å —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –∞—Ä–≥—É–º–µ–Ω—Ç–∞–º–∏)
    print('üîç –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –¥–ª—è AI...')
    ai_context = await bot._prepare_ai_context(test_user_id, portfolio, current_price)
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ N/A
    context_str = str(ai_context)
    if 'N/A' in context_str:
        print('‚ùå –í –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –≤—Å–µ –µ—â–µ –µ—Å—Ç—å –∑–Ω–∞—á–µ–Ω–∏—è N/A')
        return False
    else:
        print('‚úÖ –í –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –Ω–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–π N/A')

    # 4. –ó–∞–ø—Ä–æ—Å –∞–Ω–∞–ª–∏–∑–∞ —É AI
    print('ü§ñ –ó–∞–ø—Ä–æ—Å –∞–Ω–∞–ª–∏–∑–∞ —É AI...')
    analysis_result = await ai_client.get_market_analysis(
        market_data=ai_context, # –ü–µ—Ä–µ–¥–∞–µ–º –ø–æ–ª–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç
        analysis_type='deep'
    )
    
    if analysis_result['success']:
        print('‚úÖ –ê–Ω–∞–ª–∏–∑ —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω –æ—Ç AI')
        analysis_text = analysis_result["analysis"]
        print(f'üìä –î–ª–∏–Ω–∞ –∞–Ω–∞–ª–∏–∑–∞: {len(analysis_text)} —Å–∏–º–≤–æ–ª–æ–≤')
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç–≤–µ—Ç–∞ AI
        if '–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö' in analysis_text.lower() or '–Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö' in analysis_text.lower():
            print('‚ùå AI —Å–æ–æ–±—â–∞–µ—Ç –æ–± –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ –¥–∞–Ω–Ω—ã—Ö')
            return False
        else:
            print('‚úÖ AI –Ω–µ —Å–æ–æ–±—â–∞–µ—Ç –æ–± –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ –¥–∞–Ω–Ω—ã—Ö')
        
        return True
    else:
        print(f'‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∞–Ω–∞–ª–∏–∑–∞: {analysis_result["error"]}')
        return False


# –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞
if __name__ == "__main__":
    result = asyncio.run(test_analysis_command())
    if result:
        print('üéâ –¢–µ—Å—Ç —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–π–¥–µ–Ω! –ö–æ–º–∞–Ω–¥–∞ /analysis —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.')
    else:
        print('‚ùå –¢–µ—Å—Ç –Ω–µ –ø—Ä–æ–π–¥–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –æ—à–∏–±–∫–∏ –≤—ã—à–µ.')