#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–π –∫–æ–º–∞–Ω–¥—ã /analysis
"""

import asyncio
import sys
import os

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –ø—Ä–æ–µ–∫—Ç–∞ –≤ –ø—É—Ç—å
sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))

from ai.agentrouter_client import AgentRouterClient
from data.moex_client import MOEXClient
from ai.prompts import DEEP_ANALYSIS_PROMPT
from config import settings


async def test_analysis_length():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã /analysis —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ–º –¥–ª–∏–Ω—ã –æ—Ç–≤–µ—Ç–∞"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã /analysis —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ–º –¥–ª–∏–Ω—ã –æ—Ç–≤–µ—Ç–∞...")
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–æ–≤
    ai_client = AgentRouterClient(settings.agentrouter_api_key)
    moex_client = MOEXClient()
    
    try:
        # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä—ã–Ω–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        print("üìä –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä—ã–Ω–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö...")
        async with moex_client:
            current_price = await moex_client.get_current_price("GAZP")
            technical_indicators = await moex_client.get_technical_indicators("GAZP")
            l1_data = await moex_client.get_marketdata_l1("GAZP")
            
        if not current_price:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É")
            return False
            
        print(f"‚úÖ –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞ GAZP: {current_price} RUB")
        
        # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
        day_change = 0
        if l1_data and l1_data.open_price and l1_data.open_price > 0:
            day_change = ((current_price - l1_data.open_price) / l1_data.open_price) * 100
            
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è N/A –≤ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞—Ö
        def safe_get_indicator(key, default="N/A"):
            value = technical_indicators.get(key, default)
            if value == "N/A" or value is None:
                return default
            return value
        
        # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è —É–≥–ª—É–±–ª–µ–Ω–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
        analysis_request = DEEP_ANALYSIS_PROMPT.format(
            current_price=current_price,
            day_change=f"{day_change:.2f}",
            volume=l1_data.voltoday if l1_data else 0,
            day_high=l1_data.high if l1_data else current_price,
            day_low=l1_data.low if l1_data else current_price,
            user_shares_held=0,
            user_avg_buy_price=0,
            user_cash_balance=100000,
            rsi=safe_get_indicator("rsi"),
            macd=safe_get_indicator("macd"),
            sma_20=safe_get_indicator("sma_20"),
            sma_50=safe_get_indicator("sma_50"),
            sma_200=safe_get_indicator("sma_200")
        )
        
        print(f"üìù –î–ª–∏–Ω–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ AI: {len(analysis_request)} —Å–∏–º–≤–æ–ª–æ–≤")
        
        # –ü–æ–ª—É—á–µ–Ω–∏–µ –∞–Ω–∞–ª–∏–∑–∞ –æ—Ç AI
        print("ü§ñ –ó–∞–ø—Ä–æ—Å –∞–Ω–∞–ª–∏–∑–∞ —É AI...")
        result = await ai_client.get_market_analysis(
            {"analysis_request": analysis_request},
            analysis_type="deep"
        )
        
        if not result["success"]:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∞–Ω–∞–ª–∏–∑–∞: {result['error']}")
            return False
            
        analysis = result["analysis"]
        print(f"‚úÖ –ê–Ω–∞–ª–∏–∑ –ø–æ–ª—É—á–µ–Ω, –¥–ª–∏–Ω–∞: {len(analysis)} —Å–∏–º–≤–æ–ª–æ–≤")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª–∏–Ω—ã –æ—Ç–≤–µ—Ç–∞
        max_length = 3500
        if len(analysis) > max_length:
            print(f"‚ö†Ô∏è –û—Ç–≤–µ—Ç AI —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π: {len(analysis)} > {max_length}")
            # –û–±—Ä–µ–∑–∞–µ–º –æ—Ç–≤–µ—Ç
            truncated_analysis = analysis[:max_length] + "...\n\n_–ê–Ω–∞–ª–∏–∑ –æ–±—Ä–µ–∑–∞–Ω –∏–∑-–∑–∞ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π Telegram_"
            print(f"‚úÖ –û—Ç–≤–µ—Ç –æ–±—Ä–µ–∑–∞–Ω –¥–æ: {len(truncated_analysis)} —Å–∏–º–≤–æ–ª–æ–≤")
        else:
            print(f"‚úÖ –î–ª–∏–Ω–∞ –æ—Ç–≤–µ—Ç–∞ –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö –Ω–æ—Ä–º—ã: {len(analysis)} <= {max_length}")
            truncated_analysis = analysis
            
        # –û—á–∏—Å—Ç–∫–∞ Markdown
        import re
        def clean_markdown(text):
            # –£–¥–∞–ª—è–µ–º –≤—Å–µ HTML —Ç–µ–≥–∏
            text = re.sub(r'<[^>]*>', '', text)
            # –£–¥–∞–ª—è–µ–º –æ—Å—Ç–∞–≤—à–∏–µ—Å—è —Å–∏–º–≤–æ–ª—ã Markdown
            text = re.sub(r'[_~`]', '', text)
            # –ó–∞–º–µ–Ω—è–µ–º ** –Ω–∞ *
            text = re.sub(r'\*\*', '*', text)
            # –£–¥–∞–ª—è–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã –∏ –ø–µ—Ä–µ–Ω–æ—Å—ã —Å—Ç—Ä–æ–∫
            text = re.sub(r'\n{3,}', '\n\n', text)
            text = re.sub(r' {2,}', ' ', text)
            # –£–¥–∞–ª—è–µ–º –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã
            text = re.sub(r'[^\w\s\.\,\!\?\:\;\-\*\(\)\[\]\n\r@#%&+=/<>]', '', text)
            return text.strip()
            
        cleaned_analysis = clean_markdown(truncated_analysis)
        print(f"‚úÖ –ê–Ω–∞–ª–∏–∑ –æ—á–∏—â–µ–Ω, –∏—Ç–æ–≥–æ–≤–∞—è –¥–ª–∏–Ω–∞: {len(cleaned_analysis)} —Å–∏–º–≤–æ–ª–æ–≤")
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        final_message = f"üìä *–£–≥–ª—É–±–ª–µ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑ GAZP*\n\n{cleaned_analysis}"
        print(f"‚úÖ –§–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≥–æ—Ç–æ–≤–æ, –¥–ª–∏–Ω–∞: {len(final_message)} —Å–∏–º–≤–æ–ª–æ–≤")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª–∏–Ω—ã —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        if len(final_message) > 4096:  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram
            print(f"‚ö†Ô∏è –§–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ –¥–ª—è Telegram: {len(final_message)} > 4096")
            return False
        else:
            print(f"‚úÖ –§–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è Telegram: {len(final_message)} <= 4096")
            
        # –í—ã–≤–æ–¥ –ø–µ—Ä–≤—ã—Ö 200 —Å–∏–º–≤–æ–ª–æ–≤ –∞–Ω–∞–ª–∏–∑–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
        print("\nüìÑ –ü–µ—Ä–≤—ã–µ 200 —Å–∏–º–≤–æ–ª–æ–≤ –∞–Ω–∞–ª–∏–∑–∞:")
        print(cleaned_analysis[:200] + "..." if len(cleaned_analysis) > 200 else cleaned_analysis)
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏: {e}")
        import traceback
        traceback.print_exc()
        return False


if __name__ == "__main__":
    success = asyncio.run(test_analysis_length())
    if success:
        print("\n‚úÖ –¢–µ—Å—Ç —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–π–¥–µ–Ω!")
        sys.exit(0)
    else:
        print("\n‚ùå –¢–µ—Å—Ç –Ω–µ –ø—Ä–æ–π–¥–µ–Ω!")
        sys.exit(1)