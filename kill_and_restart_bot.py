#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å–µ—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ Python –∏ –∑–∞–ø—É—Å–∫–∞ –æ–¥–Ω–æ–≥–æ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –±–æ—Ç–∞
"""

import os
import sys
import subprocess
import time
import signal

def kill_python_processes():
    """–ó–∞–≤–µ—Ä—à–∏—Ç—å –≤—Å–µ –ø—Ä–æ—Ü–µ—Å—Å—ã Python, —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å –±–æ—Ç–æ–º"""
    print("üîç –ü–æ–∏—Å–∫ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ Python...")
    
    # –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ –ø—Ä–æ—Ü–µ—Å—Å—ã Python
    try:
        # –î–ª—è macOS/Linux
        result = subprocess.run(['ps', 'aux'], capture_output=True, text=True)
        lines = result.stdout.split('\n')
        
        python_pids = []
        for line in lines:
            if 'python' in line and ('main.py' in line or 'gazprom_bot' in line):
                parts = line.split()
                if len(parts) > 1:
                    pid = parts[1]
                    try:
                        python_pids.append(int(pid))
                    except ValueError:
                        continue
        
        if python_pids:
            print(f"üî™ –ù–∞–π–¥–µ–Ω–æ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ Python: {python_pids}")
            
            # –ó–∞–≤–µ—Ä—à–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å—ã
            for pid in python_pids:
                try:
                    print(f"üî™ –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –ø—Ä–æ—Ü–µ—Å—Å–∞ {pid}...")
                    os.kill(pid, signal.SIGTERM)
                    time.sleep(1)
                except ProcessLookupError:
                    print(f"‚ö†Ô∏è –ü—Ä–æ—Ü–µ—Å—Å {pid} —É–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω")
                except PermissionError:
                    print(f"‚ö†Ô∏è –ù–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∞ {pid}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–≤–µ—Ä—à–∏–ª–∏—Å—å –ª–∏ –ø—Ä–æ—Ü–µ—Å—Å—ã
            time.sleep(2)
            remaining_pids = []
            for pid in python_pids:
                try:
                    os.kill(pid, 0)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø—Ä–æ—Ü–µ—Å—Å
                    remaining_pids.append(pid)
                except ProcessLookupError:
                    pass
            
            if remaining_pids:
                print(f"‚ö†Ô∏è –ù–µ–∫–æ—Ç–æ—Ä—ã–µ –ø—Ä–æ—Ü–µ—Å—Å—ã –≤—Å–µ –µ—â–µ –∞–∫—Ç–∏–≤–Ω—ã: {remaining_pids}")
                print("üî™ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ...")
                for pid in remaining_pids:
                    try:
                        os.kill(pid, signal.SIGKILL)
                    except ProcessLookupError:
                        pass
        else:
            print("‚úÖ –ê–∫—Ç–∏–≤–Ω—ã–µ –ø—Ä–æ—Ü–µ—Å—Å—ã Python –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤: {e}")

def start_bot():
    """–ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞"""
    print("üöÄ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
    
    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –ø—Ä–æ–µ–∫—Ç–∞
    os.chdir(os.path.dirname(os.path.abspath(__file__)))
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    try:
        subprocess.run([sys.executable, 'main.py'], check=True)
    except KeyboardInterrupt:
        print("\n‚èπÔ∏è –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except subprocess.CalledProcessError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {e}")
    except Exception as e:
        print(f"‚ùå –ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")

if __name__ == "__main__":
    print("üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ Telegram –±–æ—Ç–∞ –¥–ª—è –∞–∫—Ü–∏–π –ì–∞–∑–ø—Ä–æ–º")
    print("=" * 50)
    
    # –ó–∞–≤–µ—Ä—à–∞–µ–º –≤—Å–µ –ø—Ä–æ—Ü–µ—Å—Å—ã Python
    kill_python_processes()
    
    # –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ
    time.sleep(3)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    start_bot()