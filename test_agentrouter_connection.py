#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å AgentRouter API
"""

import asyncio
import json
from ai.agentrouter_client import AgentRouterClient

async def test_agentrouter_connection():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å AgentRouter"""
    print("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å AgentRouter...")
    
    client = AgentRouterClient()
    
    # –¢–µ—Å—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
    print("\n1. –¢–µ—Å—Ç –±–∞–∑–æ–≤–æ–≥–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è...")
    connection_result = await client.test_connection()
    
    if connection_result["success"]:
        print("‚úÖ –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ")
        print(f"   –ú–æ–¥–µ–ª—å: {connection_result['model']}")
        print(f"   –û—Ç–≤–µ—Ç: {connection_result['response']}")
    else:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: {connection_result['error']}")
        return False
    
    # –¢–µ—Å—Ç –∑–∞–ø—Ä–æ—Å–∞ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    print("\n2. –¢–µ—Å—Ç –∑–∞–ø—Ä–æ—Å–∞ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏...")
    test_context = {
        "portfolio": {
            "cash": 100000.0,
            "shares": 10,
            "avg_price": 150.0,
            "current_price": 155.0,
            "total_value": 101550.0,
            "pnl": 1550.0,
            "pnl_percent": 1.55
        },
        "market_data": {
            "current_price": 155.0,
            "technical_indicators": {
                "rsi": 55.0,
                "macd": {
                    "macd": 2.5,
                    "signal": 2.0,
                    "histogram": 0.5
                }
            }
        },
        "risk_settings": {
            "max_position_percent": 30,
            "risk_limit_percent": 5
        }
    }
    
    from ai.prompts import TRADING_SYSTEM_PROMPT
    
    recommendation_result = await client.get_trading_recommendation(
        TRADING_SYSTEM_PROMPT, 
        test_context
    )
    
    if recommendation_result["success"]:
        print("‚úÖ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
        print(f"   –¢–æ–∫–µ–Ω–æ–≤ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ: {recommendation_result['tokens_used']}")
        print(f"   –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {recommendation_result['execution_time']:.2f} —Å–µ–∫")
        print(f"   –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: {json.dumps(recommendation_result['data'], ensure_ascii=False, indent=2)}")
    else:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏: {recommendation_result['error']}")
        return False
    
    # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    print("\n3. –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è...")
    stats = await client.get_usage_stats()
    print(f"   –ó–∞–ø—Ä–æ—Å–æ–≤: {stats['request_count']}")
    print(f"   –¢–æ–∫–µ–Ω–æ–≤ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ: {stats['tokens_used']}")
    print(f"   –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {stats['success_rate']:.1f}%")
    
    print("\n‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
    return True

if __name__ == "__main__":
    asyncio.run(test_agentrouter_connection())