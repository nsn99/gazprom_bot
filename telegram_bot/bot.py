# -*- coding: utf-8 -*-
"""
Gazprom Trading Bot - Telegram Bot Module

–û—Å–Ω–æ–≤–Ω–æ–π –º–æ–¥—É–ª—å Telegram –±–æ—Ç–∞ —Å –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞–º–∏ –∫–æ–º–∞–Ω–¥.
"""

import asyncio
from typing import Dict, Any, Tuple

from telegram import Update as TelegramUpdate
from telegram import InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Application, CommandHandler, CallbackQueryHandler,
    ContextTypes
)

from config import settings
from monitoring.logger import get_logger
from database.models import User, Portfolio, Position, Transaction, Recommendation
from portfolio.manager import PortfolioManager
from ai.agentrouter_client import AgentRouterClient
from data.moex_client import MOEXClient
from telegram_bot.handlers.confirmation import ConfirmationHandler
from config.constants import WELCOME_MESSAGE, HELP_MESSAGE, GAZP_TICKER


logger = get_logger(__name__)


class GazpromTelegramBot:
    """–û—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞—Å—Å Telegram –±–æ—Ç–∞"""
    
    def __init__(self):
        self.portfolio_manager = PortfolioManager()
        self.ai_client = AgentRouterClient(settings.agentrouter_api_key)
        self.moex_client = MOEXClient()
        self.confirmation_handler = ConfirmationHandler()
        
    async def start_command(self, update: TelegramUpdate, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
        user_id = update.effective_user.id
        username = update.effective_user.username or "Unknown"
        
        logger.info(f"–ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_id} ({username})")
        
        try:
            # –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ø–æ—Ä—Ç—Ñ–µ–ª—è
            user = await self.portfolio_manager.create_user(
                user_id=user_id,
                username=username,
                initial_capital=100000.0  # –ó–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            )
            
            welcome_message = WELCOME_MESSAGE.format(
                user_name=update.effective_user.first_name or "–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
            )
            
            await update.message.reply_html(welcome_message)
            
            # –û—Ç–ø—Ä–∞–≤–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–æ–∑–¥–∞–Ω–Ω–æ–º –ø–æ—Ä—Ç—Ñ–µ–ª–µ
            portfolio_info = await self._get_portfolio_info(user_id)
            await update.message.reply_html(portfolio_info)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ start_command: {e}")
            await update.message.reply_text(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–æ—Ä—Ç—Ñ–µ–ª—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            )
    
    async def portfolio_command(self, update: TelegramUpdate, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /portfolio"""
        user_id = update.effective_user.id
        
        try:
            portfolio_info = await self._get_portfolio_info(user_id)
            await update.message.reply_html(portfolio_info)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ portfolio_command: {e}")
            await update.message.reply_text(
                "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ—Ä—Ç—Ñ–µ–ª–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            )
    
    async def recommend_command(self, update: TelegramUpdate, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /recommend"""
        user_id = update.effective_user.id
        
        try:
            # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –Ω–∞—á–∞–ª–µ –∞–Ω–∞–ª–∏–∑–∞
            await update.message.reply_text("ü§ñ –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —Ä—ã–Ω–æ–∫ –∏ –≤–∞—à –ø–æ—Ä—Ç—Ñ–µ–ª—å —Å –ø–æ–º–æ—â—å—é AI...")
            
            # –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ—Ä—Ç—Ñ–µ–ª—è
            portfolio = await self.portfolio_manager.get_portfolio(user_id)
            if not portfolio:
                await update.message.reply_text(
                    "‚ùå –ü–æ—Ä—Ç—Ñ–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è."
                )
                return
                
            # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä—ã–Ω–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
            async with self.moex_client:
                current_price = await self.moex_client.get_current_price(GAZP_TICKER)
            if not current_price:
                await update.message.reply_text(
                    "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
                )
                return
                
            # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –¥–ª—è AI
            ai_context = await self._prepare_ai_context(user_id, portfolio, current_price)
            
            # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –Ω–æ–≤–æ–≥–æ —à–∞–±–ª–æ–Ω–∞
            from ai.prompts import TRADING_SYSTEM_PROMPT, TRADING_REQUEST_TEMPLATE
            from datetime import datetime
            
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —à–∞–±–ª–æ–Ω–∞
            market_data = ai_context.get("market_data", {})
            portfolio_data = ai_context.get("portfolio", {})
            technical_indicators = market_data.get("technical_indicators", {})
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å —Å –Ω–æ–≤—ã–º —à–∞–±–ª–æ–Ω–æ–º
            trading_request = TRADING_REQUEST_TEMPLATE.format(
                current_datetime=datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
                gazp_last_price=market_data.get("current_price", 0),
                gazp_volume=market_data.get("volume", 0),
                gazp_day_high=market_data.get("day_high", 0),
                gazp_day_low=market_data.get("day_low", 0),
                user_cash_balance=portfolio_data.get("cash", 0),
                user_shares_held=portfolio_data.get("shares", 0),
                user_avg_buy_price=portfolio_data.get("avg_price", 0),
                news_sentiment="neutral"  # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—É—á–µ–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–µ–π –≤ –±—É–¥—É—â–µ–º
            )
            
            result = await self.ai_client.get_trading_recommendation(TRADING_SYSTEM_PROMPT, trading_request)
            
            if result["success"]:
                recommendation = result["data"]
                
                # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
                message = await self._format_recommendation(recommendation, current_price)
                
                # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
                await self.portfolio_manager.save_recommendation(user_id, recommendation)
                
                # –°–æ–∑–¥–∞–Ω–∏–µ inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
                keyboard = self._create_recommendation_keyboard(recommendation)
                
                await update.message.reply_html(
                    message,
                    reply_markup=keyboard
                )
            else:
                await update.message.reply_text(
                    f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏: {result['error']}"
                )
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ recommend_command: {e}")
            await update.message.reply_text(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            )
    
    async def execute_command(self, update: TelegramUpdate, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /execute"""
        user_id = update.effective_user.id
        
        try:
            # –ü–∞—Ä—Å–∏–Ω–≥ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∫–æ–º–∞–Ω–¥—ã
            args = context.args
            if len(args) < 2:
                await update.message.reply_text(
                    "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /execute [BUY/SELL] [–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ]"
                )
                return
                
            action = args[0].upper()
            if action not in ["BUY", "SELL"]:
                await update.message.reply_text(
                    "‚ùå –ù–µ–≤–µ—Ä–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ BUY –∏–ª–∏ SELL."
                )
                return
                
            try:
                quantity = int(args[1])
                if quantity <= 0:
                    raise ValueError()
            except ValueError:
                await update.message.reply_text(
                    "‚ùå –ù–µ–≤–µ—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ü–∏–π. –£–∫–∞–∂–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ."
                )
                return
                
            # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–π —Ü–µ–Ω—ã
            async with self.moex_client:
                current_price = await self.moex_client.get_current_price(GAZP_TICKER)
            if not current_price:
                await update.message.reply_text(
                    "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
                )
                return
                
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Å–¥–µ–ª–∫–∏
            can_execute, error_message = await self._can_execute_trade(
                user_id, action, quantity, current_price
            )
            
            if not can_execute:
                await update.message.reply_text(f"‚ùå {error_message}")
                return
                
            # –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
            confirmation_data = {
                "action": action,
                "quantity": quantity,
                "price": current_price,
                "total_amount": quantity * current_price
            }
            
            confirmation_message = self._format_trade_confirmation(confirmation_data)
            keyboard = self._create_trade_confirmation_keyboard(confirmation_data)
            
            await update.message.reply_html(
                confirmation_message,
                reply_markup=keyboard
            )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ execute_command: {e}")
            await update.message.reply_text(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            )
    
    async def history_command(self, update: TelegramUpdate, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /history"""
        user_id = update.effective_user.id
        
        try:
            transactions = await self.portfolio_manager.get_transaction_history(user_id)
            
            if not transactions:
                await update.message.reply_text("üìù –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π.")
                return
            
            message = "üìù <b>–ò—Å—Ç–æ—Ä–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π:</b>\n\n"
            
            for transaction in transactions[-10:]:  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 10 —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
                action_emoji = "üü¢" if transaction.action == "BUY" else "üî¥"
                message += (
                    f"{action_emoji} {transaction.action} {transaction.shares} —à—Ç. "
                    f"–ø–æ {transaction.price:.2f} ‚ÇΩ "
                    f"({transaction.total_amount:.2f} ‚ÇΩ)\n"
                    f"üìÖ {transaction.timestamp.strftime('%d.%m.%Y %H:%M')}\n\n"
                )
            
            await update.message.reply_html(message)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ history_command: {e}")
            await update.message.reply_text(
                "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            )
    
    async def balance_command(self, update: TelegramUpdate, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /balance"""
        user_id = update.effective_user.id
        
        try:
            balance_info = await self._get_balance_info(user_id)
            await update.message.reply_html(balance_info)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ balance_command: {e}")
            await update.message.reply_text(
                "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–∞–ª–∞–Ω—Å–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            )
    
    async def analysis_command(self, update: TelegramUpdate, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /analysis –¥–ª—è —É–≥–ª—É–±–ª–µ–Ω–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞"""
        user_id = update.effective_user.id
        
        try:
            # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –Ω–∞—á–∞–ª–µ –∞–Ω–∞–ª–∏–∑–∞
            await update.message.reply_text("üìä –ü—Ä–æ–≤–æ–¥—É —É–≥–ª—É–±–ª–µ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∞–∫—Ü–∏–∏ GAZP –∏ –≤–∞—à–µ–≥–æ –ø–æ—Ä—Ç—Ñ–µ–ª—è...")
            
            # –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ—Ä—Ç—Ñ–µ–ª—è
            portfolio = await self.portfolio_manager.get_portfolio(user_id)
            if not portfolio:
                await update.message.reply_text(
                    "‚ùå –ü–æ—Ä—Ç—Ñ–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è."
                )
                return
                
            # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä—ã–Ω–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
            async with self.moex_client:
                current_price = await self.moex_client.get_current_price(GAZP_TICKER)
            if not current_price:
                await update.message.reply_text(
                    "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
                )
                return
                
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –º–µ—Ç–æ–¥ _prepare_ai_context –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
            ai_context = await self._prepare_ai_context(user_id, portfolio, current_price)
            
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
            market_data = ai_context.get("market_data", {})
            portfolio_data = ai_context.get("portfolio", {})
            technical_indicators = market_data.get("technical_indicators", {})
            
            # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è —É–≥–ª—É–±–ª–µ–Ω–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ —Å –ø–æ–ª–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
            from ai.prompts import DEEP_ANALYSIS_PROMPT
            
            # –†–∞—Å—á–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏—è –∑–∞ –¥–µ–Ω—å –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö
            day_change = 0
            if market_data.get("open_price") and market_data.get("open_price") > 0:
                day_change = ((current_price - market_data["open_price"]) / market_data["open_price"]) * 100
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è N/A –≤ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞—Ö
            def safe_get_indicator(key, default="N/A"):
                value = technical_indicators.get(key, default)
                if value == "N/A" or value is None:
                    return default
                return value
            
            analysis_request = DEEP_ANALYSIS_PROMPT.format(
                current_price=current_price,
                day_change=f"{day_change:.2f}",
                volume=market_data.get("volume", 0),
                day_high=market_data.get("day_high", current_price),
                day_low=market_data.get("day_low", current_price),
                user_shares_held=portfolio_data.get("shares", 0),
                user_avg_buy_price=portfolio_data.get("avg_price", 0),
                user_cash_balance=portfolio_data.get("cash", 0),
                rsi=safe_get_indicator("rsi"),
                macd=safe_get_indicator("macd"),
                sma_20=safe_get_indicator("sma_20"),
                sma_50=safe_get_indicator("sma_50"),
                sma_200=safe_get_indicator("sma_200")
            )
            
            # –ü–æ–ª—É—á–µ–Ω–∏–µ —É–≥–ª—É–±–ª–µ–Ω–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ –æ—Ç AI
            result = await self.ai_client.get_market_analysis(
                {"analysis_request": analysis_request},
                analysis_type="deep"
            )
            
            if result["success"]:
                analysis = result["analysis"]
                
                # –û—á–∏—Å—Ç–∫–∞ Markdown –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –æ—à–∏–±–æ–∫ –ø–∞—Ä—Å–∏–Ω–≥–∞
                cleaned_analysis = self._clean_markdown(analysis)
                
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª–∏–Ω—ã –æ—Ç–≤–µ—Ç–∞ –∏ –æ–±—Ä–µ–∑–∫–∞ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
                max_length = 3500  # –û—Å—Ç–∞–≤–ª—è–µ–º –∑–∞–ø–∞—Å –¥–ª—è –∑–∞–≥–æ–ª–æ–≤–∫–∞ –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
                if len(cleaned_analysis) > max_length:
                    cleaned_analysis = cleaned_analysis[:max_length] + "...\n\n_–ê–Ω–∞–ª–∏–∑ –æ–±—Ä–µ–∑–∞–Ω –∏–∑-–∑–∞ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π Telegram_"
                
                # –û—Ç–ø—Ä–∞–≤–∫–∞ –∞–Ω–∞–ª–∏–∑–∞
                await update.message.reply_text(
                    f"üìä *–£–≥–ª—É–±–ª–µ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑ GAZP*\n\n{cleaned_analysis}",
                    parse_mode="Markdown"
                )
            else:
                await update.message.reply_text(
                    f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∞–Ω–∞–ª–∏–∑–∞: {result['error']}"
                )
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ analysis_command: {e}")
            await update.message.reply_text(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∞–Ω–∞–ª–∏–∑–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            )
    
    async def help_command(self, update: TelegramUpdate, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
        await update.message.reply_html(HELP_MESSAGE)
    
    async def callback_query_handler(self, update: TelegramUpdate, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ inline –∫–Ω–æ–ø–æ–∫"""
        query = update.callback_query
        
        try:
            # –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ query, –Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—à–∏–±–∫—É –µ—Å–ª–∏ –æ–Ω —É—Å—Ç–∞—Ä–µ–ª
            try:
                await query.answer()
            except Exception as answer_error:
                # –ï—Å–ª–∏ query —É—Å—Ç–∞—Ä–µ–ª, –ø—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä—É–µ–º –∏ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ callback query: {answer_error}")
                return
            
            data = query.data
            
            if data.startswith("confirm_trade_"):
                # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Å–¥–µ–ª–∫–∏
                await self._handle_trade_confirmation(query, context)
            elif data.startswith("cancel_trade_"):
                # –û—Ç–º–µ–Ω–∞ —Å–¥–µ–ª–∫–∏
                await query.edit_message_text("‚ùå –°–¥–µ–ª–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.")
            elif data.startswith("execute_recommendation_"):
                # –ò—Å–ø–æ–ª–Ω–µ–Ω–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
                await self._handle_recommendation_execution(query, context)
            elif data.startswith("cancel_recommendation"):
                # –û—Ç–º–µ–Ω–∞ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ (–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: –±–µ–∑ –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏—è)
                await query.edit_message_text("‚ùå –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞.")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ callback_query_handler: {e}")
            try:
                await query.edit_message_text(
                    "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
                )
            except Exception as edit_error:
                # –ï—Å–ª–∏ –Ω–µ –º–æ–∂–µ–º –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –æ–Ω–æ —É–∂–µ —É–¥–∞–ª–µ–Ω–æ)
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {edit_error}")
    
    async def _get_portfolio_info(self, user_id: int) -> str:
        """–ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ—Ä—Ç—Ñ–µ–ª–µ"""
        portfolio = await self.portfolio_manager.get_portfolio(user_id)
        async with self.moex_client:
            current_price = await self.moex_client.get_current_price(GAZP_TICKER)
        
        if not portfolio:
            return "‚ùå –ü–æ—Ä—Ç—Ñ–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω."
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–∑–∏—Ü–∏–∏ –¥–ª—è –ø–æ—Ä—Ç—Ñ–µ–ª—è
        positions = await self.portfolio_manager.get_positions(portfolio.id)
        gazp_position = next((p for p in positions if p.ticker == "GAZP"), None)
        
        shares = gazp_position.shares if gazp_position else 0
        cash = float(portfolio.current_cash)
        
        total_value = cash + (shares * current_price)
        pnl = total_value - float(portfolio.initial_capital)
        pnl_percent = (pnl / float(portfolio.initial_capital)) * 100 if portfolio.initial_capital else 0
        
        return f"""
üíº <b>–í–∞—à –ø–æ—Ä—Ç—Ñ–µ–ª—å:</b>

üí∞ –î–µ–Ω–µ–∂–Ω—ã–µ —Å—Ä–µ–¥—Å—Ç–≤–∞: {cash:.2f} ‚ÇΩ
üìä –ê–∫—Ü–∏–∏ GAZP: {shares} —à—Ç.
üíµ –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: {current_price:.2f} ‚ÇΩ
üíé –û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: {total_value:.2f} ‚ÇΩ
üìà P&L: {pnl:+.2f} ‚ÇΩ ({pnl_percent:+.2f}%)
"""
    
    async def _get_balance_info(self, user_id: int) -> str:
        """–ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–∞–ª–∞–Ω—Å–µ"""
        portfolio = await self.portfolio_manager.get_portfolio(user_id)
        async with self.moex_client:
            current_price = await self.moex_client.get_current_price(GAZP_TICKER)
        
        if not portfolio:
            return "‚ùå –ü–æ—Ä—Ç—Ñ–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω."
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–∑–∏—Ü–∏–∏ –¥–ª—è –ø–æ—Ä—Ç—Ñ–µ–ª—è
        positions = await self.portfolio_manager.get_positions(portfolio.id)
        gazp_position = next((p for p in positions if p.ticker == "GAZP"), None)
        
        shares = gazp_position.shares if gazp_position else 0
        cash = float(portfolio.current_cash)
        shares_value = shares * current_price
        total_value = cash + shares_value
        
        return f"""
üí∞ <b>–ë–∞–ª–∞–Ω—Å –∏ –ø–æ–∑–∏—Ü–∏–∏:</b>

üíµ –î–æ—Å—Ç—É–ø–Ω–æ: {cash:.2f} ‚ÇΩ
üìä –ê–∫—Ü–∏–∏ GAZP: {shares} —à—Ç. ({shares_value:.2f} ‚ÇΩ)
üíé –û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: {total_value:.2f} ‚ÇΩ
"""
    
    async def _prepare_ai_context(self, user_id: int, portfolio: Portfolio, current_price: float) -> Dict[str, Any]:
        """–ü–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è AI"""
        # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤ –∏ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö
        async with self.moex_client:
            technical_indicators = await self.moex_client.get_technical_indicators("GAZP")
            # –ü–æ–ª—É—á–µ–Ω–∏–µ L1 –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–±—ä–µ–º–∞
            l1_data = await self.moex_client.get_marketdata_l1("GAZP")
            # –ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö —Å–≤–µ—á–µ–π –¥–ª—è day_high, day_low, open
            from datetime import datetime, timedelta
            from_date = (datetime.now() - timedelta(days=5)).strftime("%Y-%m-%d")
            historical_candles = await self.moex_client.get_historical_candles("GAZP", from_date=from_date)
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ—Å–ª–µ–¥–Ω–µ–π —Å–≤–µ—á–∏ –¥–ª—è day_high, day_low, open
        last_candle = historical_candles.iloc[-1].to_dict() if not historical_candles.empty and len(historical_candles) > 0 else None
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–∑–∏—Ü–∏–∏ –¥–ª—è –ø–æ—Ä—Ç—Ñ–µ–ª—è
        positions = await self.portfolio_manager.get_positions(portfolio.id)
        gazp_position = next((p for p in positions if p.ticker == "GAZP"), None)
        
        shares = gazp_position.shares if gazp_position else 0
        avg_price = float(gazp_position.avg_purchase_price) if gazp_position and gazp_position.avg_purchase_price else 0
        
        # –†–∞—Å—á–µ—Ç P&L
        shares_value = shares * current_price
        cash = float(portfolio.current_cash)
        total_value = cash + shares_value
        pnl = total_value - float(portfolio.initial_capital)
        pnl_percent = (pnl / float(portfolio.initial_capital)) * 100 if portfolio.initial_capital else 0
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ technical_indicators, –∫–æ—Ç–æ—Ä—ã–µ –≤–∫–ª—é—á–∞—é—Ç –¥–Ω–µ–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è N/A –≤ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞—Ö
        cleaned_indicators = {}
        for key, value in technical_indicators.items():
            if value == "N/A" or value is None:
                cleaned_indicators[key] = 0  # –∏–ª–∏ –¥—Ä—É–≥–æ–µ –ø–æ–¥—Ö–æ–¥—è—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            else:
                cleaned_indicators[key] = value
        
        market_data = {
            "current_price": current_price,
            "volume": cleaned_indicators.get("day_volume", l1_data.voltoday if l1_data else 0),
            "day_high": l1_data.high if l1_data and l1_data.high else (last_candle['high'] if last_candle else current_price),
            "day_low": l1_data.low if l1_data and l1_data.low else (last_candle['low'] if last_candle else current_price),
            "open_price": l1_data.open_price if l1_data and l1_data.open_price else (last_candle['open'] if last_candle else current_price),
            "technical_indicators": cleaned_indicators
        }
        
        # –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π –≤ AI
        validation_errors = []
        if not market_data["current_price"] or market_data["current_price"] <= 0:
            validation_errors.append("–¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞")
        if not market_data["day_high"] or market_data["day_high"] <= 0:
            validation_errors.append("–ú–∞–∫—Å–∏–º—É–º –¥–Ω—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω")
        if not market_data["day_low"] or market_data["day_low"] <= 0:
            validation_errors.append("–ú–∏–Ω–∏–º—É–º –¥–Ω—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω")
        if not market_data["volume"] or market_data["volume"] < 0:
            validation_errors.append("–û–±—ä–µ–º —Ç–æ—Ä–≥–æ–≤ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω")
        
        if validation_errors:
            logger.warning(f"–í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –Ω–µ –ø—Ä–æ–π–¥–µ–Ω–∞: {', '.join(validation_errors)}")
            # –ó–∞–ø–æ–ª–Ω—è–µ–º –Ω—É–ª—è–º–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            market_data.update({
                "day_high": market_data["day_high"] if market_data["day_high"] and market_data["day_high"] > 0 else current_price,
                "day_low": market_data["day_low"] if market_data["day_low"] and market_data["day_low"] > 0 else current_price,
                "volume": market_data["volume"] if market_data["volume"] and market_data["volume"] > 0 else 0,
                "open_price": market_data["open_price"] if market_data["open_price"] and market_data["open_price"] > 0 else current_price
            })
        
        logger.info(f"–ü–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è AI: current_price={market_data['current_price']}, "
                   f"day_high={market_data['day_high']}, day_low={market_data['day_low']}, "
                   f"volume={market_data['volume']}")
        
        return {
            "portfolio": {
                "cash": cash,
                "shares": shares,
                "avg_price": avg_price,
                "current_price": current_price,
                "total_value": total_value,
                "pnl": pnl,
                "pnl_percent": pnl_percent
            },
            "market_data": market_data,
            "risk_settings": {
                "max_position_percent": 30,
                "risk_limit_percent": 5
            }
        }
    
    def _clean_markdown(self, text: str) -> str:
        """–û—á–∏—Å—Ç–∏—Ç—å —Ç–µ–∫—Å—Ç –æ—Ç –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ Markdown –∏ HTML —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
        import re
        
        # –£–¥–∞–ª—è–µ–º –≤—Å–µ HTML —Ç–µ–≥–∏, –≤–∫–ª—é—á–∞—è –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ
        text = re.sub(r'<[^>]*>', '', text)
        
        # –£–¥–∞–ª—è–µ–º –æ—Å—Ç–∞–≤—à–∏–µ—Å—è —Å–∏–º–≤–æ–ª—ã Markdown, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –≤—ã–∑–≤–∞—Ç—å –æ—à–∏–±–∫–∏
        text = re.sub(r'[_~`]', '', text)
        
        # –ó–∞–º–µ–Ω—è–µ–º ** –Ω–∞ * –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å Markdown
        text = re.sub(r'\*\*', '*', text)
        
        # –£–¥–∞–ª—è–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã –∏ –ø–µ—Ä–µ–Ω–æ—Å—ã —Å—Ç—Ä–æ–∫
        text = re.sub(r'\n{3,}', '\n\n', text)
        text = re.sub(r' {2,}', ' ', text)
        
        # –£–¥–∞–ª—è–µ–º –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –≤—ã–∑–≤–∞—Ç—å –æ—à–∏–±–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞
        text = re.sub(r'[^\w\s\.\,\!\?\:\;\-\*\(\)\[\]\n\r@#%&+=/<>]', '', text)
        
        return text.strip()
    
    async def _format_recommendation(self, recommendation: Dict[str, Any], current_price: float) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—é"""
        # –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏–π —Å defaults
        action = recommendation.get("action", "HOLD")
        quantity = recommendation.get("quantity", 0)
        confidence = recommendation.get("confidence", 0)
        risk_level = recommendation.get("risk_level", "UNKNOWN")
        reasoning = recommendation.get("reasoning", "–ù–µ—Ç –æ–±–æ—Å–Ω–æ–≤–∞–Ω–∏—è")
        stop_loss = recommendation.get("stop_loss", current_price * 0.95)
        take_profit = recommendation.get("take_profit", current_price * 1.10)
        
        action_emoji = "üü¢" if action == "BUY" else "üî¥" if action == "SELL" else "‚ö™"
        
        # –û—á–∏—â–∞–µ–º –æ–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ –æ—Ç –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ Markdown
        cleaned_reasoning = self._clean_markdown(reasoning)
        
        return f"""
üìä *–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è AI (deepseek-v3.2)*

{action_emoji} *–î–µ–π—Å—Ç–≤–∏–µ:* {action}
üì¶ *–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ:* {quantity} –∞–∫—Ü–∏–π
üí° *–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å:* {confidence}%
‚ö†Ô∏è *–†–∏—Å–∫:* {risk_level}

üìù *–û–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ:*
{cleaned_reasoning}

üõë *Stop-Loss:* {stop_loss:.2f} ‚ÇΩ
üéÅ *Take-Profit:* {take_profit:.2f} ‚ÇΩ
"""
    
    def _create_recommendation_keyboard(self, recommendation: Dict[str, Any]) -> InlineKeyboardMarkup:
        """–°–æ–∑–¥–∞—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏"""
        # –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏–π —Å defaults
        action = recommendation.get("action", "HOLD")
        quantity = recommendation.get("quantity", 0)
        stop_loss = recommendation.get("stop_loss", 0)
        take_profit = recommendation.get("take_profit", 0)
        
        data = f"{action}_{quantity}_{stop_loss}_{take_profit}"
        
        keyboard = [
            [
                InlineKeyboardButton(
                    "‚úÖ –ò—Å–ø–æ–ª–Ω–∏—Ç—å",
                    callback_data=f"execute_recommendation_{data}"
                ),
                InlineKeyboardButton(
                    "‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å",
                    callback_data="cancel_recommendation"  # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: –±–µ–∑ –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏—è
                )
            ]
        ]
        
        return InlineKeyboardMarkup(keyboard)
    
    async def _can_execute_trade(self, user_id: int, action: str, quantity: int, price: float) -> Tuple[bool, str]:
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Å–¥–µ–ª–∫–∏"""
        portfolio = await self.portfolio_manager.get_portfolio(user_id)
        
        if not portfolio:
            return False, "–ü–æ—Ä—Ç—Ñ–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω."
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–∑–∏—Ü–∏–∏ –¥–ª—è –ø–æ—Ä—Ç—Ñ–µ–ª—è
        positions = await self.portfolio_manager.get_positions(portfolio.id)
        gazp_position = next((p for p in positions if p.ticker == "GAZP"), None)
        
        shares = gazp_position.shares if gazp_position else 0
        cash = float(portfolio.current_cash)
        
        total_amount = quantity * price
        
        if action == "BUY":
            if cash < total_amount:
                return False, f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤. –ù—É–∂–Ω–æ: {total_amount:.2f} ‚ÇΩ, –¥–æ—Å—Ç—É–ø–Ω–æ: {cash:.2f} ‚ÇΩ"
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞ –ø–æ–∑–∏—Ü–∏–∏ (–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ä–∞—Å—á–µ—Ç)
            shares_value = shares * price
            total_before = cash + shares_value
            
            new_shares = shares + quantity
            new_position_value = new_shares * price
            cash_after = cash - total_amount
            total_after = cash_after + new_position_value
            
            if total_after > 0 and (new_position_value / total_after) * 100 > 30:
                return False, "–ü—Ä–µ–≤—ã—à–µ–Ω –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏ (30%)"
            
        elif action == "SELL":
            if shares < quantity:
                return False, f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∞–∫—Ü–∏–π. –ù—É–∂–Ω–æ: {quantity}, –¥–æ—Å—Ç—É–ø–Ω–æ: {shares}"
        
        return True, ""
    
    def _format_trade_confirmation(self, trade_data: Dict[str, Any]) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Å–¥–µ–ª–∫–∏"""
        action_emoji = "üü¢" if trade_data["action"] == "BUY" else "üî¥"
        
        return f"""
üìä *–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Å–¥–µ–ª–∫–∏*

{action_emoji} *–î–µ–π—Å—Ç–≤–∏–µ:* {trade_data["action"]}
üì¶ *–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ:* {trade_data["quantity"]} –∞–∫—Ü–∏–π
üíµ *–¶–µ–Ω–∞:* {trade_data["price"]:.2f} ‚ÇΩ
üí∞ *–°—É–º–º–∞:* {trade_data["total_amount"]:.2f} ‚ÇΩ

–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –∏–ª–∏ –æ—Ç–º–µ–Ω–∏—Ç–µ —Å–¥–µ–ª–∫—É:
"""
    
    def _create_trade_confirmation_keyboard(self, trade_data: Dict[str, Any]) -> InlineKeyboardMarkup:
        """–°–æ–∑–¥–∞—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Å–¥–µ–ª–∫–∏"""
        payload = f"{trade_data['action']}_{trade_data['quantity']}_{trade_data['price']}"
        keyboard = [
            [
                InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data=f"confirm_trade_{payload}"),
                InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data=f"cancel_trade_{payload}"),
            ]
        ]
        return InlineKeyboardMarkup(keyboard)
    
    async def _handle_trade_confirmation(self, query, context):
        """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Å–¥–µ–ª–∫–∏"""
        # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ª–æ–≥–∏–∫–∞ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è —Å–¥–µ–ª–∫–∏
        # –í—Ä–µ–º–µ–Ω–Ω–æ –∑–∞–≥–ª—É—à–∫–∞
        await query.edit_message_text("‚úÖ –°–¥–µ–ª–∫–∞ –∏—Å–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
    
    async def _handle_recommendation_execution(self, query, context):
        """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –∏—Å–ø–æ–ª–Ω–µ–Ω–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏"""
        # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ª–æ–≥–∏–∫–∞ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        # –í—Ä–µ–º–µ–Ω–Ω–æ –∑–∞–≥–ª—É—à–∫–∞
        await query.edit_message_text("‚úÖ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è –∏—Å–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")


def create_application() -> Application:
    """–°–æ–∑–¥–∞—Ç—å –∏ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ Telegram –±–æ—Ç–∞"""
    bot = GazpromTelegramBot()
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    application = Application.builder().token(settings.telegram_bot_token).build()
    
    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥
    application.add_handler(CommandHandler("start", bot.start_command))
    application.add_handler(CommandHandler("portfolio", bot.portfolio_command))
    application.add_handler(CommandHandler("recommend", bot.recommend_command))
    application.add_handler(CommandHandler("execute", bot.execute_command))
    application.add_handler(CommandHandler("history", bot.history_command))
    application.add_handler(CommandHandler("balance", bot.balance_command))
    application.add_handler(CommandHandler("analysis", bot.analysis_command))
    application.add_handler(CommandHandler("help", bot.help_command))
    
    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ inline –∫–Ω–æ–ø–æ–∫
    application.add_handler(CallbackQueryHandler(bot.callback_query_handler))
    
    return application