"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ Telegram –±–æ—Ç–∞.

–†–µ–∞–ª–∏–∑—É–µ—Ç:
- –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞
- –û–±—Ä–∞–±–æ—Ç–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –≤–≤–æ–¥–∞
- –í–∞–ª–∏–¥–∞—Ü–∏—é –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
- –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–æ–≤
"""

from __future__ import annotations

import logging
import asyncio
from typing import Dict, Any, Optional
from datetime import datetime

from telegram import Update as TelegramUpdate, InlineKeyboardButton, InlineKeyboardMarkup, ParseMode
from telegram.ext import ContextTypes, CommandHandler

from config import settings
from portfolio.manager import PortfolioManager
from ai.agentrouter_client import AgentRouterClient
from monitoring.logger import get_logger


logger = logging.getLogger(__name__)


async def start_command(update: TelegramUpdate, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    try:
        user_id = update.effective_user.id
        username = update.effective_user.username
        
        logger.info(f"User {username} ({user_id}) started bot")
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ—Ä—Ç—Ñ–µ–ª—è –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        portfolio_manager = PortfolioManager()
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        existing_user = await portfolio_manager.get_user(user_id)
        
        if existing_user:
            message = f"""
üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –æ–±—Ä–∞—Ç–Ω–æ, {username}!

–í–∞—à –ø–æ—Ä—Ç—Ñ–µ–ª—å —É–∂–µ —Å–æ–∑–¥–∞–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /portfolio –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è.

–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
/portfolio - –ø—Ä–æ—Å–º–æ—Ç—Ä –ø–æ—Ä—Ç—Ñ–µ–ª—è
/recommend - –ø–æ–ª—É—á–∏—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—é
/help - —Å–ø—Ä–∞–≤–∫–∞
            """
        else:
            # –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ø–æ—Ä—Ç—Ñ–µ–ª—è
            user = await portfolio_manager.create_user(
                user_id=user_id,
                username=username,
                initial_capital=100000.0  # 100k RUB –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            )
            
            if user:
                message = f"""
üéâ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Gazprom Trading Bot, {username}!

–í–∞—à –ø–æ—Ä—Ç—Ñ–µ–ª—å —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω:
üí∞ –ù–∞—á–∞–ª—å–Ω—ã–π –∫–∞–ø–∏—Ç–∞–ª: 100,000 RUB
üìä –°—Ç–∞—Ç—É—Å: –ê–∫—Ç–∏–≤–µ–Ω

–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
/portfolio - –ø—Ä–æ—Å–º–æ—Ç—Ä –ø–æ—Ä—Ç—Ñ–µ–ª—è
/recommend - –ø–æ–ª—É—á–∏—Ç—å AI-—Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—é
/balance - —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å
/help - –≤—Å–µ –∫–æ–º–∞–Ω–¥—ã

‚ö†Ô∏è –í–∞–∂–Ω–æ: –í—Å–µ —Å–¥–µ–ª–∫–∏ —Å–∏–º—É–ª—è—Ü–∏–æ–Ω–Ω—ã–µ –∏ –Ω–µ –ø—Ä–∏–≤–æ–¥—è—Ç –∫ —Ä–µ–∞–ª—å–Ω—ã–º —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–º –æ–ø–µ—Ä–∞—Ü–∏—è–º.
                """
            else:
                message = f"""
‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–æ—Ä—Ç—Ñ–µ–ª—è

–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.
                """
        
        await update.message.reply_text(message, parse_mode=ParseMode.HTML)
        
    except Exception as e:
        logger.error(f"Error in start_command: {e}")
        await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


async def portfolio_command(update: TelegramUpdate, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /portfolio"""
    try:
        user_id = update.effective_user.id
        
        logger.info(f"User {user_id} requested portfolio")
        
        portfolio_manager = PortfolioManager()
        
        # –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ—Ä—Ç—Ñ–µ–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        portfolio = await portfolio_manager.get_portfolio(user_id)
        
        if not portfolio:
            await update.message.reply_text(
                "‚ùå –ü–æ—Ä—Ç—Ñ–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è.",
                parse_mode=ParseMode.HTML
            )
            return
        
        # –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ—Ä—Ç—Ñ–µ–ª—è
        portfolio = await portfolio_manager.get_portfolio(user_id)
        
        if not portfolio:
            await update.message.reply_text(
                "‚ùå –ü–æ—Ä—Ç—Ñ–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è.",
                parse_mode=ParseMode.HTML
            )
            return
        
        # –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–π
        positions = await portfolio_manager.get_positions(portfolio.id)
        
        # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–≤–æ–¥–∫–∏ –ø–æ—Ä—Ç—Ñ–µ–ª—è
        portfolio_summary = await portfolio_manager.get_portfolio_summary(user_id)
        
        message = f"""
üìä <b>–í–∞—à –ø–æ—Ä—Ç—Ñ–µ–ª—å</b>

üí∞ <b>–û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å:</b> {portfolio_summary.get('total_value', 0):,.0f} RUB
üíµ <b>–î–æ—Å—Ç—É–ø–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤:</b> {portfolio_summary.get('cash', 0):,.0f} RUB
üìà <b>P&L:</b> {portfolio_summary.get('pnl', 0):,.0f} RUB ({portfolio_summary.get('pnl_percent', 0):+.2f}%)

<b>–ü–æ–∑–∏—Ü–∏–∏:</b>
        """
        
        if positions:
            for position in positions:
                pnl_sign = "üìà" if position.unrealized_pnl >= 0 else "üìâ"
                message += f"""
{position.ticker}: {position.shares} —à—Ç. –ø–æ {position.avg_purchase_price:.2f} RUB
–¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: {position.current_price:.2f} RUB
P&L: {pnl_sign} {position.unrealized_pnl:.0f} RUB ({position.pnl_percent:+.2f}%)
                """
        else:
            message += "\nüì≠ –ü–æ–∑–∏—Ü–∏–π –Ω–µ—Ç"
        
        await update.message.reply_text(message, parse_mode=ParseMode.HTML)
        
    except Exception as e:
        logger.error(f"Error in portfolio_command: {e}")
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ—Ä—Ç—Ñ–µ–ª—è")


async def recommend_command(update: TelegramUpdate, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /recommend"""
    try:
        user_id = update.effective_user.id
        
        logger.info(f"User {user_id} requested recommendation")
        
        # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –Ω–∞—á–∞–ª–µ –∞–Ω–∞–ª–∏–∑–∞
        await update.message.reply_text(
            "ü§ñ –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —Ä—ã–Ω–æ–∫ –∏ –≤–∞—à –ø–æ—Ä—Ç—Ñ–µ–ª—å... –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –¥–æ 15 —Å–µ–∫—É–Ω–¥.",
            parse_mode=ParseMode.HTML
        )
        
        # –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
        portfolio_manager = PortfolioManager()
        ai_client = AgentRouterClient(settings.AGENTROUTER_API_KEY)
        
        # –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ—Ä—Ç—Ñ–µ–ª—è
        portfolio = await portfolio_manager.get_portfolio(user_id)
        if not portfolio:
            await update.message.reply_text(
                "‚ùå –ü–æ—Ä—Ç—Ñ–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è.",
                parse_mode=ParseMode.HTML
            )
            return
        
        # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä—ã–Ω–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        # –í —Ä–µ–∞–ª—å–Ω–æ–º –∫–æ–¥–µ –∑–¥–µ—Å—å –Ω—É–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ—Ç MOEX
        market_data = {"current_price": 0.0}  # –ó–∞–≥–ª—É—à–∫–∞
        technical_indicators = {}  # –ó–∞–≥–ª—É—à–∫–∞
        
        # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–≤–æ–¥–∫–∏ –ø–æ—Ä—Ç—Ñ–µ–ª—è
        portfolio_summary = await portfolio_manager.get_portfolio_summary(user_id)
        
        # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –¥–ª—è AI
        ai_context = {
            "portfolio": portfolio_summary,
            "market_data": market_data,
            "technical_indicators": technical_indicators,
            "timestamp": datetime.now().isoformat()
        }
        
        # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –æ—Ç GPT-5
        system_prompt = _get_system_prompt()
        result = await ai_client.get_trading_recommendation(ai_context)
        
        if result["success"]:
            recommendation = result["data"]
            
            # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –≤ –ë–î
            await portfolio_manager.save_recommendation(
                user_id=user_id,
                recommendation=recommendation
            )
            
            # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–µ–π
            action_emoji = "üü¢" if recommendation["action"] == "BUY" else "üî¥" if recommendation["action"] == "SELL" else "üü°"
            action_text = {
                "BUY": "–ü–û–ö–£–ü–ö–ê",
                "SELL": "–ü–†–û–î–ê–ñ–ê", 
                "HOLD": "–£–î–ï–†–ñ–ê–ù–ò–ï"
            }.get(recommendation["action"], recommendation["action"])
            
            message = f"""
{action_emoji} <b>–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è GPT-5</b>

üéØ <b>–î–µ–π—Å—Ç–≤–∏–µ:</b> {action_text}
üì¶ <b>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ:</b> {recommendation.get('quantity', 'N/A')} –∞–∫—Ü–∏–π
üí° <b>–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å:</b> {recommendation.get('confidence', 0)}%
‚ö†Ô∏è <b>–†–∏—Å–∫:</b> {recommendation.get('risk_level', 'UNKNOWN')}

üìù <b>–û–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ:</b>
{recommendation.get('reasoning', '–ê–Ω–∞–ª–∏–∑ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω')}

üõë <b>Stop-Loss:</b> {recommendation.get('stop_loss', 'N/A')} RUB
üéÅ <b>Take-Profit:</b> {recommendation.get('take_profit', 'N/A')} RUB

‚è±Ô∏è <b>–í—Ä–µ–º—è –∞–Ω–∞–ª–∏–∑–∞:</b> {result.get('execution_time', 0):.2f}s
üîã <b>–¢–æ–∫–µ–Ω–æ–≤ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ:</b> {result.get('tokens_used', 0)}

–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /execute –¥–ª—è –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è —Å–¥–µ–ª–∫–∏.
            """
            
            # –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –±—ã—Å—Ç—Ä—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π
            if recommendation["action"] in ["BUY", "SELL"]:
                keyboard = [
                    [
                        InlineKeyboardButton(
                            f"‚úÖ –ò—Å–ø–æ–ª–Ω–∏—Ç—å {action_text}",
                            callback_data=f"execute_recommendation:{recommendation['action']}:{recommendation.get('quantity', 0)}"
                        ),
                        InlineKeyboardButton(
                            "‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å",
                            callback_data="reject_recommendation"
                        )
                    ]
                ]
                reply_markup = InlineKeyboardMarkup(keyboard)
            else:
                reply_markup = None
            
            await update.message.reply_text(
                message,
                parse_mode=ParseMode.HTML,
                reply_markup=reply_markup
            )
        else:
            error_message = f"""
‚ùå <b>–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏</b>

üîç <b>–ü—Ä–∏—á–∏–Ω–∞:</b> {result.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}

üîÑ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç.
            """
            
            await update.message.reply_text(error_message, parse_mode=ParseMode.HTML)
        
    except Exception as e:
        logger.error(f"Error in recommend_command: {e}")
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏")


async def execute_command(update: TelegramUpdate, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /execute"""
    try:
        user_id = update.effective_user.id
        
        # –ü–∞—Ä—Å–∏–Ω–≥ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∫–æ–º–∞–Ω–¥—ã
        args = context.args if context.args else []
        
        if len(args) < 2:
            await update.message.reply_text(
                "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /execute [BUY/SELL] [–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ]",
                parse_mode=ParseMode.HTML
            )
            return
        
        action = args[0].upper()
        quantity = args[1]
        
        # –í–∞–ª–∏–¥–∞—Ü–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
        if action not in ["BUY", "SELL"]:
            await update.message.reply_text(
                "‚ùå –ù–µ–≤–µ—Ä–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ BUY –∏–ª–∏ SELL.",
                parse_mode=ParseMode.HTML
            )
            return
        
        try:
            quantity = int(quantity)
            if quantity <= 0:
                raise ValueError("Quantity must be positive")
        except ValueError:
            await update.message.reply_text(
                "‚ùå –ù–µ–≤–µ—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ.",
                parse_mode=ParseMode.HTML
            )
            return
        
        logger.info(f"User {user_id} wants to {action} {quantity} shares")
        
        # –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ—Ä—Ç—Ñ–µ–ª—è
        portfolio_manager = PortfolioManager()
        portfolio = await portfolio_manager.get_portfolio(user_id)
        
        if not portfolio:
            await update.message.reply_text(
                "‚ùå –ü–æ—Ä—Ç—Ñ–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è.",
                parse_mode=ParseMode.HTML
            )
            return
        
        # –ò—Å–ø–æ–ª–Ω–µ–Ω–∏–µ —Å–¥–µ–ª–∫–∏ —á–µ—Ä–µ–∑ –º–µ–Ω–µ–¥–∂–µ—Ä –ø–æ—Ä—Ç—Ñ–µ–ª—è
        # –°–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É
        # –í —Ä–µ–∞–ª—å–Ω–æ–º –∫–æ–¥–µ –∑–¥–µ—Å—å –Ω—É–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å —Ü–µ–Ω—É –æ—Ç MOEX
        current_price = 300.0  # –ó–∞–≥–ª—É—à–∫–∞
        
        result = await portfolio_manager.execute_trade(
            user_id=user_id,
            action=action,
            ticker="GAZP",
            quantity=quantity,
            price=current_price,
            reason=f"Manual execution via /execute command"
        )
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ –æ–∂–∏–¥–∞–µ–º–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
        if result:
            result_dict = {
                "success": True,
                "executed_shares": quantity,
                "executed_price": current_price,
                "commission": quantity * current_price * 0.0003,
                "net_amount": quantity * current_price * (1 + 0.0003)
            }
        else:
            result_dict = {
                "success": False,
                "error": "–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏–∏ —Å–¥–µ–ª–∫–∏"
            }
        
        if result_dict["success"]:
            result = result_dict
            message = f"""
‚úÖ <b>–°–¥–µ–ª–∫–∞ –∏—Å–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!</b>

üìà <b>–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç:</b> GAZP
üí∞ <b>–î–µ–π—Å—Ç–≤–∏–µ:</b> {action}
üì¶ <b>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ:</b> {result['executed_shares']} –∞–∫—Ü–∏–π
üíµ <b>–¶–µ–Ω–∞:</b> {result['executed_price']:.2f} RUB
üí∏ <b>–ö–æ–º–∏—Å—Å–∏—è:</b> {result['commission']:.2f} RUB
üí≥ <b>–ò—Ç–æ–≥–æ:</b> {result['net_amount']:,.0f} RUB

üïê <b>–í—Ä–µ–º—è:</b> {datetime.now().strftime('%H:%M:%S')}
            """
        else:
            result = result_dict
            message = f"""
‚ùå <b>–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏–∏ —Å–¥–µ–ª–∫–∏</b>

üìà <b>–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç:</b> GAZP
üí∞ <b>–î–µ–π—Å—Ç–≤–∏–µ:</b> {action}
üì¶ <b>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ:</b> {quantity} —à—Ç.

üö® <b>–û—à–∏–±–∫–∞:</b> {result['error']}
            """
        
        await update.message.reply_text(message, parse_mode=ParseMode.HTML)
        
    except Exception as e:
        logger.error(f"Error in execute_command: {e}")
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏–∏ —Å–¥–µ–ª–∫–∏")


async def balance_command(update: TelegramUpdate, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /balance"""
    try:
        user_id = update.effective_user.id
        
        logger.info(f"User {user_id} requested balance")
        
        portfolio_manager = PortfolioManager()
        portfolio = await portfolio_manager.get_portfolio(user_id)
        
        if not portfolio:
            await update.message.reply_text(
                "‚ùå –ü–æ—Ä—Ç—Ñ–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è.",
                parse_mode=ParseMode.HTML
            )
            return
        
        # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–≤–æ–¥–∫–∏ –ø–æ—Ä—Ç—Ñ–µ–ª—è
        portfolio_summary = await portfolio_manager.get_portfolio_summary(user_id)
        
        message = f"""
üí∞ <b>–ë–∞–ª–∞–Ω—Å –ø–æ—Ä—Ç—Ñ–µ–ª—è</b>

üíµ <b>–î–æ—Å—Ç—É–ø–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤:</b> {portfolio_summary.get('cash', 0):,.0f} RUB
üìä <b>–û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å:</b> {portfolio_summary.get('total_value', 0):,.0f} RUB
üìà <b>–û–±—â–∏–π P&L:</b> {portfolio_summary.get('pnl', 0):,.0f} RUB ({portfolio_summary.get('pnl_percent', 0):+.2f}%)

üîÑ <b>–û–±–Ω–æ–≤–ª–µ–Ω–æ:</b> {datetime.now().strftime('%d.%m.%Y %H:%M:%S')}
        """
        
        await update.message.reply_text(message, parse_mode=ParseMode.HTML)
        
    except Exception as e:
        logger.error(f"Error in balance_command: {e}")
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –±–∞–ª–∞–Ω—Å–∞")


async def history_command(update: TelegramUpdate, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /history"""
    try:
        user_id = update.effective_user.id
        
        logger.info(f"User {user_id} requested history")
        
        portfolio_manager = PortfolioManager()
        portfolio = await portfolio_manager.get_portfolio(user_id)
        
        if not portfolio:
            await update.message.reply_text(
                "‚ùå –ü–æ—Ä—Ç—Ñ–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è.",
                parse_mode=ParseMode.HTML
            )
            return
        
        # –ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
        transactions = await portfolio_manager.get_transaction_history(
            user_id=user_id,
            limit=10
        )
        
        if not transactions:
            message = "üì≠ <b>–ò—Å—Ç–æ—Ä–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –ø—É—Å—Ç–∞</b>"
        else:
            message = "üìú <b>–ü–æ—Å–ª–µ–¥–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏:</b>\n\n"
            
            for tx in transactions:
                action_emoji = "üü¢" if tx.action == "BUY" else "üî¥"
                message += f"""
{action_emoji} <b>{tx.action}</b> {tx.shares} —à—Ç. –ø–æ {tx.price:.2f} RUB
üí∞ –°—É–º–º–∞: {tx.total_amount:,.0f} RUB
üìÖ –î–∞—Ç–∞: {tx.timestamp.strftime('%d.%m.%Y %H:%M')}
                """
        
        await update.message.reply_text(message, parse_mode=ParseMode.HTML)
        
    except Exception as e:
        logger.error(f"Error in history_command: {e}")
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏—Å—Ç–æ—Ä–∏–∏")


async def performance_command(update: TelegramUpdate, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /performance"""
    try:
        user_id = update.effective_user.id
        
        logger.info(f"User {user_id} requested performance")
        
        portfolio_manager = PortfolioManager()
        
        # –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –ø–æ—Ä—Ç—Ñ–µ–ª—è
        performance = await portfolio_manager.get_performance_metrics(
            user_id=user_id,
            days=30
        )
        
        if not performance:
            await update.message.reply_text(
                "‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏.",
                parse_mode=ParseMode.HTML
            )
            return
        
        # TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –≥—Ä–∞—Ñ–∏–∫–æ–≤
        await update.message.reply_text(
            "üìà <b>–§—É–Ω–∫—Ü–∏—è –≥—Ä–∞—Ñ–∏–∫–æ–≤ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞</b>\n\n"
            "–ú—ã —Ä–∞–±–æ—Ç–∞–µ–º –Ω–∞–¥ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ–º —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.",
            parse_mode=ParseMode.HTML
        )
        
    except Exception as e:
        logger.error(f"Error in performance_command: {e}")
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏–∏ –≥—Ä–∞—Ñ–∏–∫–∞")


async def help_command(update: TelegramUpdate, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
    try:
        message = """
ü§ñ <b>Gazprom Trading Bot - –°–ø—Ä–∞–≤–∫–∞</b>

<b>–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>
/start - –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ—Ä—Ç—Ñ–µ–ª—è –∏ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
/portfolio - –ü—Ä–æ—Å–º–æ—Ç—Ä —Ç–µ–∫—É—â–µ–≥–æ –ø–æ—Ä—Ç—Ñ–µ–ª—è
/recommend - –ü–æ–ª—É—á–∏—Ç—å AI-—Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—é –æ—Ç GPT-5
/execute [BUY/SELL] [–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ] - –ò—Å–ø–æ–ª–Ω–∏—Ç—å —Å–¥–µ–ª–∫—É
/balance - –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å –∏ —Å—Ä–µ–¥—Å—Ç–≤–∞
/history - –ò—Å—Ç–æ—Ä–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
/performance - –ì—Ä–∞—Ñ–∏–∫ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏

<b>–†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>
/setinitial [—Å—É–º–º–∞] - –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–∞—á–∞–ª—å–Ω—ã–π –∫–∞–ø–∏—Ç–∞–ª
/setrisklimit [–ø—Ä–æ—Ü–µ–Ω—Ç—ã] - –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ª–∏–º–∏—Ç —Ä–∏—Å–∫–∞
/chart [–ø–µ—Ä–∏–æ–¥] - –ì—Ä–∞—Ñ–∏–∫ —Ü–µ–Ω—ã –∑–∞ –ø–µ—Ä–∏–æ–¥
/risk - –ê–Ω–∞–ª–∏–∑ —Ä–∏—Å–∫–æ–≤ –ø–æ—Ä—Ç—Ñ–µ–ª—è

<b>–ü—Ä–∏–º–µ—Ä—ã:</b>
/recommend - –ø–æ–ª—É—á–∏—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—é
/execute BUY 100 - –∫—É–ø–∏—Ç—å 100 –∞–∫—Ü–∏–π
/execute SELL 50 - –ø—Ä–æ–¥–∞—Ç—å 50 –∞–∫—Ü–∏–π
/setinitial 200000 - —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∫–∞–ø–∏—Ç–∞–ª 200k RUB

<b>–û –±–æ—Ç–µ:</b>
ü§ñ AI: GPT-5 —á–µ—Ä–µ–∑ AgentRouter
üìä –ê–Ω–∞–ª–∏–∑: –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã + AI
üõ°Ô∏è –†–∏—Å–∫–∏: –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —Å—Ç–æ–ø-–ª–æ—Å—Å—ã
üìà –ì—Ä–∞—Ñ–∏–∫–∏: –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏

‚ö†Ô∏è <b>–í–∞–∂–Ω–æ:</b> –í—Å–µ —Å–¥–µ–ª–∫–∏ —Å–∏–º—É–ª—è—Ü–∏–æ–Ω–Ω—ã–µ –∏ –Ω–µ –ø—Ä–∏–≤–æ–¥—è—Ç –∫ —Ä–µ–∞–ª—å–Ω—ã–º —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–º –æ–ø–µ—Ä–∞—Ü–∏—è–º.

üìû <b>–ü–æ–¥–¥–µ—Ä–∂–∫–∞:</b> @support_bot
        """
        
        await update.message.reply_text(message, parse_mode=ParseMode.HTML)
        
    except Exception as e:
        logger.error(f"Error in help_command: {e}")
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–ø—Ä–∞–≤–∫–∏")


def _get_system_prompt() -> str:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ –ø—Ä–æ–º–ø—Ç–∞ –¥–ª—è GPT-5"""
    return """
–¢—ã ‚Äî –ø–æ—Ä—Ç—Ñ–µ–ª—å–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä, —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä—É—é—â–∏–π—Å—è –Ω–∞ —Ç–æ—Ä–≥–æ–≤–ª–µ –∞–∫—Ü–∏—è–º–∏ 
–ü–ê–û "–ì–∞–∑–ø—Ä–æ–º" (GAZP) –Ω–∞ –ú–æ—Å–∫–æ–≤—Å–∫–æ–π –±–∏—Ä–∂–µ.

–ü–†–ê–í–ò–õ–ê –¢–û–†–ì–û–í–õ–ò:
1. –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä –æ–¥–Ω–æ–π –ø–æ–∑–∏—Ü–∏–∏: 30% –æ—Ç –∫–∞–ø–∏—Ç–∞–ª–∞
2. –°—Ç–æ–ø-–ª–æ—Å—Å: –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω –ø—Ä–∏ –ª—é–±–æ–π –ø–æ–∫—É–ø–∫–µ (-5% –æ—Ç —Ü–µ–Ω—ã –≤—Ö–æ–¥–∞)
3. –¢–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç: –º–∏–Ω–∏–º—É–º +10% –æ—Ç —Ü–µ–Ω—ã –≤—Ö–æ–¥–∞
4. –ù–µ —Ç–æ—Ä–≥–æ–≤–∞—Ç—å –≤ –ø–µ—Ä–≤—ã–µ/–ø–æ—Å–ª–µ–¥–Ω–∏–µ 15 –º–∏–Ω—É—Ç —Ç–æ—Ä–≥–æ–≤–æ–π —Å–µ—Å—Å–∏–∏
5. –£—á–∏—Ç—ã–≤–∞—Ç—å –≥–µ–æ–ø–æ–ª–∏—Ç–∏—á–µ—Å–∫–∏–µ —Ä–∏—Å–∫–∏ –∏ –Ω–æ–≤–æ—Å—Ç–∏ –æ –∫–æ–º–ø–∞–Ω–∏–∏

–§–û–†–ú–ê–¢ –û–¢–í–ï–¢–ê:
–î–∞–π —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—é –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON:
{
  "action": "BUY/SELL/HOLD",
  "quantity": <–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ü–∏–π>,
  "reasoning": "<–æ–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ —Ä–µ—à–µ–Ω–∏—è>",
  "stop_loss": <—Ü–µ–Ω–∞ —Å—Ç–æ–ø-–ª–æ—Å—Å–∞>,
  "take_profit": <—Ü–µ–Ω–∞ —Ç–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç–∞>,
  "risk_level": "LOW/MEDIUM/HIGH",
  "confidence": <0-100>
}
    """


def register_command_handlers(application):
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥"""
    application.add_handler(CommandHandler("start", start_command))
    application.add_handler(CommandHandler("portfolio", portfolio_command))
    application.add_handler(CommandHandler("recommend", recommend_command))
    application.add_handler(CommandHandler("execute", execute_command))
    application.add_handler(CommandHandler("balance", balance_command))
    application.add_handler(CommandHandler("history", history_command))
    application.add_handler(CommandHandler("performance", performance_command))
    application.add_handler(CommandHandler("help", help_command))
    
    logger.info("Command handlers registered")