"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–π —Å–¥–µ–ª–æ–∫ –≤ Telegram –±–æ—Ç–µ.

–†–µ–∞–ª–∏–∑—É–µ—Ç:
- –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–µ –¥–∏–∞–ª–æ–≥–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Å–¥–µ–ª–æ–∫
- Inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –±—ã—Å—Ç—Ä—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π
- –û–±—Ä–∞–±–æ—Ç–∫—É callback'–æ–≤ –æ—Ç –∫–Ω–æ–ø–æ–∫
- –í–∞–ª–∏–¥–∞—Ü–∏—é –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ —Å–¥–µ–ª–æ–∫
"""

from __future__ import annotations

import logging
from typing import Dict, List, Optional, Any, Callable
from datetime import datetime, timedelta
from dataclasses import dataclass

from telegram import Update as TelegramUpdate, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.constants import ParseMode
from telegram.ext import CallbackQueryHandler, ContextTypes

from database.models import TransactionAction
from portfolio.manager import PortfolioManager
from ai.agentrouter_client import AgentRouterClient
from config import settings

logger = logging.getLogger(__name__)


@dataclass
class PendingTrade:
    """–û–∂–∏–¥–∞—é—â–∞—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Å–¥–µ–ª–∫–∞"""
    user_id: int
    portfolio_id: int
    action: str
    ticker: str
    quantity: int
    price: float
    reason: str
    timestamp: datetime
    recommendation_id: Optional[int] = None
    expires_at: Optional[datetime] = None


class ConfirmationHandler:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–π —Å–¥–µ–ª–æ–∫"""
    
    def __init__(self):
        self.portfolio_manager = PortfolioManager()
        self.agentrouter_client = AgentRouterClient(settings.agentrouter_api_key)
        
        # –•—Ä–∞–Ω–∏–ª–∏—â–µ –æ–∂–∏–¥–∞—é—â–∏—Ö —Å–¥–µ–ª–æ–∫ (–≤ production –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å Redis)
        self.pending_trades: Dict[str, PendingTrade] = {}
        
        # –í—Ä–µ–º—è –∂–∏–∑–Ω–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è (5 –º–∏–Ω—É—Ç)
        self.confirmation_timeout = timedelta(minutes=5)
        
        logger.info("ConfirmationHandler initialized")
    
    def create_trade_confirmation(self, user_id: int, portfolio_id: int,
                                action: str, ticker: str, quantity: int,
                                price: float, reason: str,
                                recommendation_id: Optional[int] = None) -> tuple[str, InlineKeyboardMarkup]:
        """
        –°–æ–∑–¥–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Å–¥–µ–ª–∫–∏
        
        Returns:
            tuple: (—Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è, –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞)
        """
        try:
            # –°–æ–∑–¥–∞–Ω–∏–µ ID —Å–¥–µ–ª–∫–∏
            trade_id = f"{user_id}_{portfolio_id}_{datetime.now().timestamp()}"
            
            # –°–æ–∑–¥–∞–Ω–∏–µ –æ–∂–∏–¥–∞—é—â–µ–π —Å–¥–µ–ª–∫–∏
            pending_trade = PendingTrade(
                user_id=user_id,
                portfolio_id=portfolio_id,
                action=action,
                ticker=ticker,
                quantity=quantity,
                price=price,
                reason=reason,
                timestamp=datetime.now(),
                recommendation_id=recommendation_id,
                expires_at=datetime.now() + self.confirmation_timeout
            )
            
            # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
            self.pending_trades[trade_id] = pending_trade
            
            # –†–∞—Å—á–µ—Ç —Å—É–º–º—ã —Å–¥–µ–ª–∫–∏
            total_amount = quantity * price
            commission = total_amount * 0.0003  # 0.03% –∫–æ–º–∏—Å—Å–∏—è
            total_with_commission = total_amount + commission
            
            # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
            action_emoji = "üü¢" if action == TransactionAction.BUY else "üî¥"
            action_text = "–ü–û–ö–£–ü–ö–ê" if action == TransactionAction.BUY else "–ü–†–û–î–ê–ñ–ê"
            
            message = f"""
{action_emoji} <b>–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Å–¥–µ–ª–∫–∏</b>

üìà <b>–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç:</b> {ticker}
üí∞ <b>–î–µ–π—Å—Ç–≤–∏–µ:</b> {action_text}
üìä <b>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ:</b> {quantity:,} —à—Ç.
üíµ <b>–¶–µ–Ω–∞:</b> {price:.2f} RUB
üí∏ <b>–°—É–º–º–∞:</b> {total_amount:,.0f} RUB
üè¶ <b>–ö–æ–º–∏—Å—Å–∏—è:</b> {commission:.2f} RUB
üí≥ <b>–ò—Ç–æ–≥–æ:</b> {total_with_commission:,.0f} RUB

üìù <b>–û—Å–Ω–æ–≤–∞–Ω–∏–µ:</b>
{reason}

‚è∞ <b>–î–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –¥–æ:</b> {pending_trade.expires_at.strftime('%H:%M:%S')}
            """
            
            # –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
            keyboard = [
                [
                    InlineKeyboardButton(
                        f"‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å {action_text}",
                        callback_data=f"confirm_trade:{trade_id}"
                    ),
                    InlineKeyboardButton(
                        "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å",
                        callback_data=f"cancel_trade:{trade_id}"
                    )
                ],
                [
                    InlineKeyboardButton(
                        "‚öôÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ",
                        callback_data=f"modify_quantity:{trade_id}"
                    )
                ]
            ]
            
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            logger.info(f"Created trade confirmation for user {user_id}: {action} {quantity} {ticker}")
            return message, reply_markup
            
        except Exception as e:
            logger.error(f"Error creating trade confirmation: {e}")
            raise
    
    async def handle_callback_query(self, update: TelegramUpdate, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ callback –∑–∞–ø—Ä–æ—Å–æ–≤ –æ—Ç –∫–Ω–æ–ø–æ–∫"""
        try:
            query = update.callback_query
            await query.answer()
            
            # –ü–∞—Ä—Å–∏–Ω–≥ callback_data
            callback_data = query.data
            parts = callback_data.split(':')
            
            if len(parts) < 2:
                await query.edit_message_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∑–∞–ø—Ä–æ—Å–∞")
                return
            
            action = parts[0]
            trade_id = parts[1]
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —Å–¥–µ–ª–∫–∏
            if trade_id not in self.pending_trades:
                await query.edit_message_text("‚ùå –°–¥–µ–ª–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –∏—Å—Ç–µ–∫–ª–∞")
                return
            
            pending_trade = self.pending_trades[trade_id]
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ –∂–∏–∑–Ω–∏
            if datetime.now() > pending_trade.expires_at:
                del self.pending_trades[trade_id]
                await query.edit_message_text("‚ùå –í—Ä–µ–º—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∏—Å—Ç–µ–∫–ª–æ")
                return
            
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–µ–π—Å—Ç–≤–∏—è
            if action == "confirm_trade":
                await self._handle_confirm_trade(query, pending_trade, trade_id)
            elif action == "cancel_trade":
                await self._handle_cancel_trade(query, pending_trade, trade_id)
            elif action == "modify_quantity":
                await self._handle_modify_quantity(query, pending_trade, trade_id)
            else:
                await query.edit_message_text("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ")
                
        except Exception as e:
            logger.error(f"Error handling callback query: {e}")
            await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞")
    
    async def _handle_confirm_trade(self, query, pending_trade: PendingTrade, trade_id: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Å–¥–µ–ª–∫–∏"""
        try:
            # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ–±—Ä–∞–±–æ—Ç–∫–µ
            await query.edit_message_text("‚è≥ –ò—Å–ø–æ–ª–Ω—è—é —Å–¥–µ–ª–∫—É...")
            
            # –ò—Å–ø–æ–ª–Ω–µ–Ω–∏–µ —Å–¥–µ–ª–∫–∏ —á–µ—Ä–µ–∑ –º–µ–Ω–µ–¥–∂–µ—Ä –ø–æ—Ä—Ç—Ñ–µ–ª—è
            result = await self.portfolio_manager.execute_trade(
                user_id=pending_trade.user_id,
                action=pending_trade.action,
                ticker=pending_trade.ticker,
                quantity=pending_trade.quantity,
                price=pending_trade.price,
                recommendation_id=pending_trade.recommendation_id
            )
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ –æ–∂–∏–¥–∞–µ–º–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
            if result:
                result_dict = {
                    'success': True,
                    'executed_price': pending_trade.price,
                    'commission': pending_trade.quantity * pending_trade.price * 0.0003,
                    'net_amount': pending_trade.quantity * pending_trade.price * (1 + 0.0003)
                }
            else:
                result_dict = {
                    'success': False,
                    'error': '–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏–∏ —Å–¥–µ–ª–∫–∏'
                }
            
            if result_dict['success']:
                result = result_dict
                # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
                if pending_trade.recommendation_id:
                    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
                    pass  # TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
                
                # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± —É—Å–ø–µ—Ö–µ
                action_text = "–∫—É–ø–ª–µ–Ω—ã" if pending_trade.action == TransactionAction.BUY else "–ø—Ä–æ–¥–∞–Ω—ã"
                message = f"""
‚úÖ <b>–°–¥–µ–ª–∫–∞ –∏—Å–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!</b>

üìà {pending_trade.quantity:,} –∞–∫—Ü–∏–π {pending_trade.ticker} {action_text}
üíµ –¶–µ–Ω–∞: {result['executed_price']:.2f} RUB
üí∏ –ö–æ–º–∏—Å—Å–∏—è: {result['commission']:.2f} RUB
üí≥ –ò—Ç–æ–≥–æ: {result['net_amount']:,.0f} RUB

üïê –í—Ä–µ–º—è: {datetime.now().strftime('%H:%M:%S')}
                """
                
                await query.edit_message_text(message, parse_mode=ParseMode.HTML)
                
                logger.info(f"Trade executed successfully: {pending_trade.action} {pending_trade.quantity} {pending_trade.ticker}")
            else:
                result = result_dict
                # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ
                message = f"""
‚ùå <b>–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏–∏ —Å–¥–µ–ª–∫–∏</b>

üìà –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç: {pending_trade.ticker}
üí∞ –î–µ–π—Å—Ç–≤–∏–µ: {pending_trade.action}
üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {pending_trade.quantity:,} —à—Ç.

üö® –û—à–∏–±–∫–∞: {result['error']}
                """
                
                await query.edit_message_text(message, parse_mode=ParseMode.HTML)
                
                logger.error(f"Trade execution failed: {result['error']}")
            
            # –£–¥–∞–ª–µ–Ω–∏–µ –∏–∑ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
            del self.pending_trades[trade_id]
            
        except Exception as e:
            logger.error(f"Error confirming trade: {e}")
            await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏–∏ —Å–¥–µ–ª–∫–∏")
    
    async def _handle_cancel_trade(self, query, pending_trade: PendingTrade, trade_id: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–º–µ–Ω—ã —Å–¥–µ–ª–∫–∏"""
        try:
            # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
            if pending_trade.recommendation_id:
                # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
                pass  # TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
            
            # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
            message = f"""
‚ùå <b>–°–¥–µ–ª–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞</b>

üìà –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç: {pending_trade.ticker}
üí∞ –î–µ–π—Å—Ç–≤–∏–µ: {pending_trade.action}
üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {pending_trade.quantity:,} —à—Ç.

üïê –í—Ä–µ–º—è: {datetime.now().strftime('%H:%M:%S')}
            """
            
            await query.edit_message_text(message, parse_mode=ParseMode.HTML)
            
            # –£–¥–∞–ª–µ–Ω–∏–µ –∏–∑ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
            del self.pending_trades[trade_id]
            
            logger.info(f"Trade cancelled: {pending_trade.action} {pending_trade.quantity} {pending_trade.ticker}")
            
        except Exception as e:
            logger.error(f"Error cancelling trade: {e}")
            await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ —Å–¥–µ–ª–∫–∏")
    
    async def _handle_modify_quantity(self, query, pending_trade: PendingTrade, trade_id: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∞–∫—Ü–∏–π"""
        try:
            # –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –≤—ã–±–æ—Ä–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
            current_qty = pending_trade.quantity
            step = 10  # –®–∞–≥ –∏–∑–º–µ–Ω–µ–Ω–∏—è
            
            keyboard = []
            
            # –ö–Ω–æ–ø–∫–∏ —É–º–µ–Ω—å—à–µ–Ω–∏—è
            decrease_row = []
            if current_qty > step:
                decrease_row.append(
                    InlineKeyboardButton(
                        f"-{step}",
                        callback_data=f"change_quantity:{trade_id}:{current_qty - step}"
                    )
                )
            if current_qty > step * 2:
                decrease_row.append(
                    InlineKeyboardButton(
                        f"-{step * 2}",
                        callback_data=f"change_quantity:{trade_id}:{current_qty - step * 2}"
                    )
                )
            if decrease_row:
                keyboard.append(decrease_row)
            
            # –¢–µ–∫—É—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
            keyboard.append([
                InlineKeyboardButton(
                    f"–¢–µ–∫—É—â–µ–µ: {current_qty} —à—Ç.",
                    callback_data="noop"
                )
            ])
            
            # –ö–Ω–æ–ø–∫–∏ —É–≤–µ–ª–∏—á–µ–Ω–∏—è
            increase_row = []
            increase_row.append(
                InlineKeyboardButton(
                    f"+{step}",
                    callback_data=f"change_quantity:{trade_id}:{current_qty + step}"
                )
            )
            increase_row.append(
                InlineKeyboardButton(
                    f"+{step * 2}",
                    callback_data=f"change_quantity:{trade_id}:{current_qty + step * 2}"
                )
            )
            keyboard.append(increase_row)
            
            # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
            keyboard.append([
                InlineKeyboardButton(
                    "‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å",
                    callback_data=f"confirm_trade:{trade_id}"
                ),
                InlineKeyboardButton(
                    "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å",
                    callback_data=f"cancel_trade:{trade_id}"
                )
            ])
            
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
            total_amount = current_qty * pending_trade.price
            commission = total_amount * 0.0003
            total_with_commission = total_amount + commission
            
            action_emoji = "üü¢" if pending_trade.action == TransactionAction.BUY else "üî¥"
            action_text = "–ü–û–ö–£–ü–ö–ê" if pending_trade.action == TransactionAction.BUY else "–ü–†–û–î–ê–ñ–ê"
            
            message = f"""
{action_emoji} <b>–ò–∑–º–µ–Ω–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∞–∫—Ü–∏–π</b>

üìà <b>–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç:</b> {pending_trade.ticker}
üí∞ <b>–î–µ–π—Å—Ç–≤–∏–µ:</b> {action_text}
üìä <b>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ:</b> {current_qty:,} —à—Ç.
üíµ <b>–¶–µ–Ω–∞:</b> {pending_trade.price:.2f} RUB
üí∏ <b>–°—É–º–º–∞:</b> {total_amount:,.0f} RUB
üè¶ <b>–ö–æ–º–∏—Å—Å–∏—è:</b> {commission:.2f} RUB
üí≥ <b>–ò—Ç–æ–≥–æ:</b> {total_with_commission:,.0f} RUB

‚è∞ <b>–î–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –¥–æ:</b> {pending_trade.expires_at.strftime('%H:%M:%S')}
            """
            
            await query.edit_message_text(message, reply_markup=reply_markup, parse_mode=ParseMode.HTML)
            
        except Exception as e:
            logger.error(f"Error modifying quantity: {e}")
            await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞")
    
    async def handle_quantity_change(self, update: TelegramUpdate, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞"""
        try:
            query = update.callback_query
            await query.answer()
            
            # –ü–∞—Ä—Å–∏–Ω–≥ callback_data
            callback_data = query.data
            parts = callback_data.split(':')
            
            if len(parts) < 3 or parts[0] != "change_quantity":
                return
            
            trade_id = parts[1]
            new_quantity = int(parts[2])
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —Å–¥–µ–ª–∫–∏
            if trade_id not in self.pending_trades:
                await query.edit_message_text("‚ùå –°–¥–µ–ª–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –∏—Å—Ç–µ–∫–ª–∞")
                return
            
            pending_trade = self.pending_trades[trade_id]
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ –∂–∏–∑–Ω–∏
            if datetime.now() > pending_trade.expires_at:
                del self.pending_trades[trade_id]
                await query.edit_message_text("‚ùå –í—Ä–µ–º—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∏—Å—Ç–µ–∫–ª–æ")
                return
            
            # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
            pending_trade.quantity = new_quantity
            
            # –ü–æ–≤—Ç–æ—Ä–Ω–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
            message, reply_markup = self.create_trade_confirmation(
                user_id=pending_trade.user_id,
                portfolio_id=pending_trade.portfolio_id,
                action=pending_trade.action,
                ticker=pending_trade.ticker,
                quantity=new_quantity,
                price=pending_trade.price,
                reason=pending_trade.reason,
                recommendation_id=pending_trade.recommendation_id
            )
            
            await query.edit_message_text(message, reply_markup=reply_markup, parse_mode=ParseMode.HTML)
            
        except Exception as e:
            logger.error(f"Error handling quantity change: {e}")
            await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞")
    
    def cleanup_expired_trades(self):
        """–û—á–∏—Å—Ç–∫–∞ –∏—Å—Ç–µ–∫—à–∏—Ö —Å–¥–µ–ª–æ–∫"""
        try:
            current_time = datetime.now()
            expired_trades = []
            
            for trade_id, pending_trade in self.pending_trades.items():
                if current_time > pending_trade.expires_at:
                    expired_trades.append(trade_id)
                    
                    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
                    if pending_trade.recommendation_id:
                        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
                        pass  # TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
            
            # –£–¥–∞–ª–µ–Ω–∏–µ –∏—Å—Ç–µ–∫—à–∏—Ö —Å–¥–µ–ª–æ–∫
            for trade_id in expired_trades:
                del self.pending_trades[trade_id]
            
            if expired_trades:
                logger.info(f"Cleaned up {len(expired_trades)} expired trades")
                
        except Exception as e:
            logger.error(f"Error cleaning up expired trades: {e}")
    
    def get_pending_trades_count(self, user_id: int) -> int:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –æ–∂–∏–¥–∞—é—â–∏—Ö —Å–¥–µ–ª–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        count = 0
        for pending_trade in self.pending_trades.values():
            if pending_trade.user_id == user_id:
                count += 1
        return count
    
    def get_pending_trade(self, trade_id: str) -> Optional[PendingTrade]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –æ–∂–∏–¥–∞—é—â–µ–π —Å–¥–µ–ª–∫–∏ –ø–æ ID"""
        return self.pending_trades.get(trade_id)


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞
confirmation_handler = None


def get_confirmation_handler() -> ConfirmationHandler:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–π"""
    global confirmation_handler
    if confirmation_handler is None:
        confirmation_handler = ConfirmationHandler()
    return confirmation_handler


# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –¥–ª—è Telegram –±–æ—Ç–∞
def register_confirmation_handlers(application):
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–π –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏"""
    confirmation_handler = get_confirmation_handler()
    
    # –û—Å–Ω–æ–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ callback –∑–∞–ø—Ä–æ—Å–æ–≤
    application.add_handler(CallbackQueryHandler(
        confirmation_handler.handle_callback_query,
        pattern=r'^(confirm_trade|cancel_trade|modify_quantity):'
    ))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
    application.add_handler(CallbackQueryHandler(
        confirmation_handler.handle_quantity_change,
        pattern=r'^change_quantity:'
    ))
    
    logger.info("Confirmation handlers registered")