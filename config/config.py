# -*- coding: utf-8 -*-
"""
Gazprom Trading Bot - Configuration Module

–ú–æ–¥—É–ª—å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º Pydantic.
"""

import os
from pathlib import Path
from typing import List, Optional

from pydantic import Field
from pydantic_settings import BaseSettings


class Settings(BaseSettings):
    """–û—Å–Ω–æ–≤–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    
    # –û–∫—Ä—É–∂–µ–Ω–∏–µ
    environment: str = Field(default="development", env="ENVIRONMENT")
    debug: bool = Field(default=False, env="DEBUG")
    
    # Telegram Bot API
    telegram_bot_token: str = Field(..., env="TELEGRAM_BOT_TOKEN")
    telegram_admin_user_ids: str = Field(default="", env="TELEGRAM_ADMIN_USER_IDS")
    
    # –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö
    database_url: str = Field(default="sqlite+aiosqlite:///gazprom_bot.db", env="DATABASE_URL")
    database_echo: bool = Field(default=False, env="DATABASE_ECHO")
    
    # AgentRouter (GPT-5)
    agentrouter_api_key: str = Field(..., env="AGENTROUTER_API_KEY")
    agentrouter_base_url: str = Field(default="https://agentrouter.org/v1", env="AGENTROUTER_BASE_URL")
    agentrouter_model: str = Field(default="deepseek-v3.2", env="AGENTROUTER_MODEL")
    
    # MOEX API
    moex_base_url: str = Field(default="https://iss.moex.com/iss", env="MOEX_BASE_URL")
    moex_board: str = Field(default="TQBR", env="MOEX_BOARD")
    
    # –†–∏—Å–∫-–º–µ–Ω–µ–¥–∂–º–µ–Ω—Ç
    risk_max_position_rub: float = Field(default=30000.0, env="RISK_MAX_POSITION_RUB")
    risk_max_portfolio_risk: float = Field(default=0.02, env="RISK_MAX_PORTFOLIO_RISK")
    risk_stop_loss_pct: float = Field(default=0.05, env="RISK_STOP_LOSS_PCT")
    risk_take_profit_pct: float = Field(default=0.10, env="RISK_TAKE_PROFIT_PCT")
    
    # –ò—Å–ø–æ–ª–Ω–µ–Ω–∏–µ —Å–¥–µ–ª–æ–∫
    execution_commission_pct_per_side: float = Field(default=0.0003, env="EXECUTION_COMMISSION_PCT_PER_SIDE")
    
    # –î–∞–Ω–Ω—ã–µ
    data_candle_interval_min: int = Field(default=1, env="DATA_CANDLE_INTERVAL_MIN")
    data_history_days: int = Field(default=30, env="DATA_HISTORY_DAYS")
    
    # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
    logging_level: str = Field(default="INFO", env="LOGGING_LEVEL")
    logging_console_output: bool = Field(default=True, env="LOGGING_CONSOLE_OUTPUT")
    
    # –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
    monitoring_enabled: bool = Field(default=True, env="MONITORING_ENABLED")
    monitoring_slow_operation_threshold: float = Field(default=5.0, env="MONITORING_SLOW_OPERATION_THRESHOLD")
    
    # –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è
    visualization_chart_width: int = Field(default=1200, env="VISUALIZATION_CHART_WIDTH")
    visualization_chart_height: int = Field(default=800, env="VISUALIZATION_CHART_HEIGHT")
    
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ constants
    DEFAULT_INITIAL_CAPITAL: float = Field(default=100000.0)
    
    class Config:
        env_file = ".env"
        env_file_encoding = "utf-8"
        case_sensitive = False


def get_settings() -> Settings:
    """–ü–æ–ª—É—á–∏—Ç—å —ç–∫–∑–µ–º–ø–ª—è—Ä –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
    settings_obj = Settings()
    
    # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫—É —Å ID –∞–¥–º–∏–Ω–æ–≤ –≤ —Å–ø–∏—Å–æ–∫ —á–∏—Å–µ–ª
    if settings_obj.telegram_admin_user_ids:
        try:
            settings_obj.telegram_admin_user_ids = [
                int(id_str.strip()) for id_str in settings_obj.telegram_admin_user_ids.split(',')
                if id_str.strip().isdigit()
            ]
        except ValueError:
            settings_obj.telegram_admin_user_ids = []
    else:
        settings_obj.telegram_admin_user_ids = []
    
    return settings_obj


def validate_config(settings_obj: Settings) -> bool:
    """–í–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
    errors = []
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
    if not settings_obj.telegram_bot_token:
        errors.append("TELEGRAM_BOT_TOKEN –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω")
    
    if not settings_obj.agentrouter_api_key:
        errors.append("AGENTROUTER_API_KEY –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ —Ç–æ–∫–µ–Ω–∞ Telegram
    if settings_obj.telegram_bot_token and not settings_obj.telegram_bot_token.startswith(":"):
        errors.append("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç TELEGRAM_BOT_TOKEN")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ API –∫–ª—é—á–∞ AgentRouter
    if settings_obj.agentrouter_api_key and not settings_obj.agentrouter_api_key.startswith("sk-"):
        errors.append("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç AGENTROUTER_API_KEY")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —á–∏—Å–ª–æ–≤—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
    if settings_obj.risk_max_position_rub <= 0:
        errors.append("RISK_MAX_POSITION_RUB –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º")
    
    if not 0 <= settings_obj.risk_max_portfolio_risk <= 1:
        errors.append("RISK_MAX_PORTFOLIO_RISK –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ [0, 1]")
    
    if not 0 <= settings_obj.risk_stop_loss_pct <= 1:
        errors.append("RISK_STOP_LOSS_PCT –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ [0, 1]")
    
    if not 0 <= settings_obj.risk_take_profit_pct <= 1:
        errors.append("RISK_TAKE_PROFIT_PCT –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ [0, 1]")
    
    if errors:
        print("‚ùå –û—à–∏–±–∫–∏ –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏:")
        for error in errors:
            print(f"  - {error}")
        return False
    
    return True


def print_config_summary(settings_obj: Settings):
    """–í—ã–≤–µ—Å—Ç–∏ —Å–≤–æ–¥–∫—É –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
    print("üìã –°–≤–æ–¥–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏:")
    print(f"  üåç –û–∫—Ä—É–∂–µ–Ω–∏–µ: {settings_obj.environment}")
    print(f"  ü§ñ Telegram Bot: {'‚úÖ –ù–∞—Å—Ç—Ä–æ–µ–Ω' if settings_obj.telegram_bot_token else '‚ùå –ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω'}")
    print(f"  üß† AgentRouter: {'‚úÖ –ù–∞—Å—Ç—Ä–æ–µ–Ω' if settings_obj.agentrouter_api_key else '‚ùå –ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω'}")
    print(f"  üíæ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: {settings_obj.database_url}")
    print(f"  üìä MOEX API: {settings_obj.moex_base_url}")
    print(f"  ‚ö†Ô∏è –ú–∞–∫—Å. —Ä–∏—Å–∫ –ø–æ—Ä—Ç—Ñ–µ–ª—è: {settings_obj.risk_max_portfolio_risk * 100:.1f}%")
    print(f"  üõë –°—Ç–æ–ø-–ª–æ—Å—Å: {settings_obj.risk_stop_loss_pct * 100:.1f}%")
    print(f"  üéØ –¢–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç: {settings_obj.risk_take_profit_pct * 100:.1f}%")


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –Ω–∞—Å—Ç—Ä–æ–µ–∫
settings = get_settings()